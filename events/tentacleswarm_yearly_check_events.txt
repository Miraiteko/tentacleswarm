#天灾触发检查相关事件
#0001 统治者年度检查
#1001 AI天灾信徒年度行动
#1011 触手奴隶年度检查
#1012 AI触手奴隶年度行动
#1021 遭遇年度检查
#2001 驱逐异教骑士团
#2002 AI战狂远征
#5001 AI对4VA的响应
#6001 玩家恶堕结算
namespace = tentacleswarm_yearly_check

tentacleswarm_yearly_check.0001 = {
	hidden = yes
	immediate = { 
		
		#先检查播种令和灭杀令等内容是否继续生效
		if = {
			limit = { is_tentacleswarm_religion_character = yes }
			if = { #信徒开启播种令
				limit = { 
					NOT = { has_character_modifier = tentacleswarm_spread }
					is_ai = yes #玩家自己点决议
					is_tentacle_slave = yes #非奴隶没有兴趣
					is_landed = yes
				}
				add_character_modifier = tentacleswarm_spread
			}
			if = { #信徒变政体
				limit = { 
					NOT = { has_government = tentacleswarm_government }
					is_ai = yes #玩家自己点决议
					is_landed = yes
				}
				change_government = tentacleswarm_government
			}
			if = { #开继承法
				limit = { 
					has_government = tentacleswarm_government
					is_landed = yes
					is_ai = yes
				}
				every_held_title = {
					limit = {
						tier >= tier_duchy
						NOT = { has_title_law = tentacleswarm_elective_succession_law }
					}
					add_title_law = tentacleswarm_elective_succession_law
				}
			}
		}
		else = {
			if = { #非信徒播种令无效化
				limit = { has_character_modifier = tentacleswarm_spread}
				remove_character_modifier = tentacleswarm_spread
			}
			if = { #非信徒关闭政体
				limit = { 
					has_government = tentacleswarm_government
					is_landed = yes
				}
				change_government = feudal_government #暂且先变封建
			}
			if = { #关继承法
				limit = { 
					is_landed = yes
					is_ai = yes
				}
				every_held_title = {
					limit = {
						tier >= tier_duchy
						has_title_law = tentacleswarm_elective_succession_law
					}
					remove_title_law = tentacleswarm_elective_succession_law
				}
			}
		}
		if = {
			limit = { 
				faith = {has_doctrine = doctrine_tentacle_slave_evil}
				is_tentacle_slave = no
			}
			#敌对者开启灭杀令
			#通过决议
			
			#退出触手征服进攻战争
			every_character_war = {
				limit = { 
					using_cb = tentacleswarm_conquest 
					is_attacker = prev
					NOT = { is_war_leader = prev }
				}
				remove_participant = prev
			}
			#退出触手剿灭防御战争
			every_character_war = {
				limit = { 
					using_cb = tentacleswarm_religious_war
					is_defender = prev
					NOT = { is_war_leader = prev }
				}
				remove_participant = prev
			}
		}
		else = {
			if = { #非敌对者灭杀令无效化
				limit = { has_character_modifier = tentacleswarm_anti}
				remove_character_modifier = tentacleswarm_anti
			}
			#退出触手征服防御战争
			every_character_war = {
				limit = { 
					using_cb = tentacleswarm_religious_war
					is_attacker = prev
					NOT = { is_war_leader = prev }
				}
				remove_participant = prev
			}
			#退出触手剿灭进攻战争
			every_character_war = {
				limit = { 
					using_cb = tentacleswarm_conquest
					is_defender = prev
					NOT = { is_war_leader = prev }
				}
				remove_participant = prev
			}
		}
		
		#下面进行腐化度的计算
		#计算统治者的宫廷会带来多大的腐化度 
		set_variable =  { name = tentacleswarm_corruption_add value = 0} 	#基础
		if = {
			limit = { is_tentacle_slave = yes } 
			change_variable =  { name = tentacleswarm_corruption_add add = 0 } #如果统治者是奴隶
		}	
		if = {
			limit = { 
				has_character_modifier = tentacleswarm_spread
			}
			change_variable =  { name = tentacleswarm_corruption_add add = 10 }  #如果统治者执行播种令
		}
		every_spouse = {
			limit = { 
				is_tentacle_slave = yes  
				is_in_the_same_court_as_or_guest = PREV
			}
			PREV = { change_variable =  { name = tentacleswarm_corruption_add add = 0 } }#如果配偶是奴隶，配偶需要在宫廷
		}
		every_courtier_or_guest = {
			limit = { is_tentacle_slave = yes  }
			PREV = { change_variable =  { name = tentacleswarm_corruption_add add = 0 } }#如果宾客是奴隶
		}
		if = { #雇佣了播种人
			limit = {
				employs_court_position = tentacle_missionary_court_position
			}
			every_court_position_holder = {
				type = tentacle_missionary_court_position
				#根据称职度程度给予腐化
				if = {
					limit = {
						aptitude = {
							court_position = tentacle_missionary_court_position
							value = 1
						}
					}
					PREV = { change_variable =  { name = tentacleswarm_corruption_add add = 5 } }
				}
				else_if = {
					limit = {
						aptitude = {
							court_position = tentacle_missionary_court_position
							value = 2
						}
					}
					PREV = { change_variable =  { name = tentacleswarm_corruption_add add = 10 } }
				}
				else_if = {
					limit = {
						aptitude = {
							court_position = tentacle_missionary_court_position
							value = 3 
						}
					}
					PREV = { change_variable =  { name = tentacleswarm_corruption_add add = 15 } }
				}
				else_if = {
					limit = {
						aptitude = {
							court_position = tentacle_missionary_court_position
							value = 4
						}
					}
					PREV = { change_variable =  { name = tentacleswarm_corruption_add add = 20 } }
				}
				else = {
					PREV = { change_variable =  { name = tentacleswarm_corruption_add add = 25 } }
				}
			}
		}
		
		if = { #如果依然持有土地的话
			limit = { 
				is_alive = yes
				is_landed = yes 
			}
		
			#为每个伯爵领结算腐化度
			every_held_title = {
				limit = { tier = tier_county }
				save_scope_as = county
				
				#先计算效果导致的变化
				change_variable =  { #宫廷效果
					name = tentacleswarm_corruption 
					add = holder.var:tentacleswarm_corruption_add
				}
				change_variable =  { #自然效果
					name = tentacleswarm_corruption 
					add = var:tentacleswarm_corruption_nature
				}
				
				#接下来计算发展度导致的变化
				#计算有多少怪物吃饱了
				set_variable =  { 
					name = tentacleswarm_corruption_fed
					value = {
						value = var:tentacleswarm_corruption
						multiply = tentacleswarm_corruption_decay_value_minus
					}
				}
				#计算有多少怪物没吃饱
				set_variable =  { 
					name = tentacleswarm_corruption_decrease 
					value = {
						value = var:tentacleswarm_corruption
						multiply = tentacleswarm_corruption_decay_value
					}
				}
				if = { #大于1才结算
					limit = { var:tentacleswarm_corruption_fed  > 1 } 
					#吃饱的会继续繁殖
					change_variable =  { 
						name = tentacleswarm_corruption 
						add = {
							value = var:tentacleswarm_corruption_fed
							multiply = 0.05
						}
					}
				}
				
				#没吃饱的情况
				if = { #大于1才结算
					limit = { var:tentacleswarm_corruption_decrease > 1  } 
					
					#没吃饱的怪物润了或者死了
					change_variable =  { name = tentacleswarm_corruption subtract = var:tentacleswarm_corruption_decrease }
					
					#20%润一个相邻伯爵领，至少要10发展度，没地方可润就死了
					random_title_to_title_neighboring_and_across_water_county = {
						limit = {
							development_level >= 10
						}
						change_variable =  {
							name = tentacleswarm_corruption 
							add = {
								value = scope:county.var:tentacleswarm_corruption_decrease 
								multiply = 0.20
							}
						}
						tentacleswarm_corruption_county_check = yes
					}					
					#20%润一个相邻伯爵领，至少要5发展度，没地方可润就死了
					random_title_to_title_neighboring_and_across_water_county = {
						limit = {
							development_level >= 5
						}
						change_variable =  {
							name = tentacleswarm_corruption 
							add = {
								value = scope:county.var:tentacleswarm_corruption_decrease 
								multiply = 0.20
							}
						}
						tentacleswarm_corruption_county_check = yes
					}			
					#20%润一个相邻伯爵领，至少要3发展度，没地方可润就死了
					random_title_to_title_neighboring_and_across_water_county = {
						limit = {
							development_level >= 3
						}
						change_variable =  {
							name = tentacleswarm_corruption 
							add = {
								value = scope:county.var:tentacleswarm_corruption_decrease 
								multiply = 0.20
							}
						}
						tentacleswarm_corruption_county_check = yes
					}
					#20%向低处扩散，至少要1发展度
					random_title_to_title_neighboring_and_across_water_county = {
						limit = {
							development_level >= 1
							var:tentacleswarm_corruption<scope:county.var:tentacleswarm_corruption 
						}
						change_variable =  {
							name = tentacleswarm_corruption 
							add = {
								value = scope:county.var:tentacleswarm_corruption_decrease 
								multiply = 0.20
							}
						}
						tentacleswarm_corruption_county_check = yes
					}
					#还有20%是直接死了的
				}
				
				#数值计算完毕，进行结算
				#五档：10,20,35,60,100
				tentacleswarm_corruption_county_check = yes #根据腐化程度结算效果：改颜色，改buff,
			}
		}
		#成就相关
		tentacleswarm_check = yes
	}
}
tentacleswarm_yearly_check.1001 = { #寻求腐化
	hidden = yes
	trigger = {
		is_ai = yes
		is_tentaclable_female = yes
		is_tentacle_slave = no
	}
	immediate = { 
		trigger_event = {
			id = tentacleswarm_scene.0030
		}
	}
}
tentacleswarm_yearly_check.1011 = {
	hidden = yes
	immediate = { 
		if = { #生育率太低的时候失去祝福，开始生病
			limit = {
				age >= 30 #排除儿童或者贞操带之类的特殊情况
				is_tentaclable_female = no
			}
			if = {
				limit = { has_character_flag = immune_to_disease }
				remove_character_flag = immune_to_disease
			}
			if = { #体弱多病
				limit = {
					NOR = { 
						has_trait = infirm
						has_trait = incapable
					}
				}
				trigger_event = {
					id = tentacleswarm_scene.1001
				}
			}
			else = {
				random_list = {
					#抑郁
					10 = {
						trigger = { 
							NOR = {
								has_trait = depressed 
								has_character_flag = had_event_health_7100 
							}
						}
						trigger_event = {
							id = health.7100
						}
					}
					#肺痨
					5 = {
						trigger = { 
							can_contract_disease_trigger = { DISEASE = consumption } 
						}
						trigger_event = {
							id = health.1006
						}
					}
					#痛风
					5 = {
						trigger = { 
							can_contract_disease_trigger = { DISEASE = gout_ridden } 
						}
						trigger_event = {
							id = health.1003
						}
					}
					#癌症
					5 = {
						trigger = { 
							can_contract_disease_trigger = { DISEASE = cancer } 
						}
						trigger_event = {
							id = health.1007
						}
					}
					#死亡
					1 = {
						death = { death_reason = death_spindly }
					}
				}
			}
		}
	}
}
tentacleswarm_yearly_check.1012 = {
	hidden = yes
	trigger = {
				is_ai = yes
	}
	immediate = { 
		if = {
			limit = {
				#如果上头有人，皈依正统信仰,揭露身份
				NOT = { is_tentacleswarm_religion_character = yes }
				any_liege_or_above = { is_tentacleswarm_religion_character = yes }
			}
			convert_to_tentacleswarm_religion = yes
		}
		#每年寻求一次赐福
		trigger_event = {
			id = tentacleswarm_scene.0030 #虔诚赐福
		}
		trigger_event = {
			id = tentacle_degenerate_scheme.9999 #非领主的触手奴隶无法发动【互动】，需要用事件发动计谋
		}
		
	}
}
tentacleswarm_yearly_check.1021= {
	hidden = yes
	immediate = { 
		#男性，可能因为瘴气患病
		if = {
			limit = {
				is_female = no
			}
			random_list = {
				0 = {
					modifier = {
						add = location.county.var:tentacleswarm_corruption
						exists = location
						exists = location.county
					}
					trigger_event = {
						on_action = disease_outbreak_pulse
						months = { 1 6 }
					}
				}
				200 = {
				}
			}
		}
		#适龄女性，可能受到袭击
		if = {
			limit = {
				is_tentaclable_female = yes
			}
			random_list = {
				1 = {
					tentacle_encounter_chance_modifier = yes
					trigger_event = {
						on_action = tentacle_encounter_random_pulse #随机遭遇
						months = { 6 9 }
					}
				}
				500 = {
				}
			}
		}
	}
}
tentacleswarm_yearly_check.2001 = {
	hidden = yes
	trigger = {
		is_landed = yes
	}
	immediate = { 
		every_held_title = {
			limit = { 
				tier = tier_county
			}
			every_county_province = {
				limit = {
					exists = barony
				}
				barony = { #搜查每个直辖地内男爵领
					if = {
						limit = { #被租赁
							is_leased_out = yes
							has_revokable_lease = yes
						}
						lessee_title = { save_scope_as = lessee_title }
						if = {
							limit = { #敌对信仰租赁
								root.faith ={
									faith_hostility_level = { target = scope:lessee_title.holder.faith value > 1 }
								}
							}
							revoke_lease = yes #撤销租赁
						}
					}
				}
			}
		}
	}
}
tentacleswarm_yearly_check.2002 = {
	hidden = yes
	trigger = {
		is_ai = yes
		is_tentacleswarm_religion_character = yes
		is_at_war = no
		is_tentacle_slave = yes #是奴隶
		is_independent_ruler = yes #独立
		max_military_strength > 4000 #有一定兵力积蓄
		gold > 0 #没负债
		piety > 100 #虔诚限制
	}
	immediate = { 
		#远征。通常的触手征服只会打相邻的目标，我们现在让AI进行远征
		save_scope_as = actor
		#确定战争对象
		random_in_global_list = {
			variable = tentacleswarm_main_target_ruler
			limit = {
				highest_held_title_tier >= tier_duchy #不啃独立小伯爵
				is_landed = yes #有地
				NOT = { is_tentacleswarm_religion_character = yes } #异教
				ROOT = { #需要符合宣战条件
					is_character_interaction_valid = {
					   recipient = PREV
					   interaction = declare_war_interaction
					}
				}
			}
			save_scope_as = target_character
			save_scope_as = recipient
		}
		#确定目标，发动战争
		if = {
			limit = { 
				exists = scope:target_character
			}
			scope:target_character = {
				random_realm_county = {
					limit = { 
						development_level >= 3
						building_max_garrison <= scope:actor.max_military_strength #能围下来
					}
					save_scope_as = target
				}
				if = {
					limit = {
						war_declarer_needs_hook_on_liege = no #不需要领主同意就能发动战争
						exists = scope:target
					}
					scope:actor = {
						start_war = { 
							casus_belli = tentacleswarm_conquest 
							target = scope:target_character
							target_title = scope:target.kingdom
						}
					}
				}
			}
		}
	}
}

tentacleswarm_yearly_check.5001 = { #AI对4VA的响应
	hidden = yes
	trigger = {
		is_ai = yes
		is_landed = yes
		highest_held_title_tier >=tier_county
	}
	immediate = { 
		save_scope_as = actor
		if = {			
			if = { #奴隶统治者，响应改信
				limit = {
					is_tentacle_slave = yes
					not = { is_tentacleswarm_religion_character = yes }
				}
				convert_to_tentacleswarm_religion = yes
				tentacleswarm_4VA = yes 
			}
		}
		#敌视统治者准备剿杀
		if = { 
			limit = { 
				exists = scope:4VA_from
				is_at_war = no
				highest_held_title_tier >= tier_duchy
				faith = {
					has_doctrine = doctrine_tentacle_slave_evil #敌视
				}
				is_character_interaction_valid = { #是否可以宣战
				   recipient = scope:4VA_from
				   interaction = declare_war_interaction
				}
				NOT = { is_vassal_or_below_of = scope:4VA_from }
				scope:4VA_from = { #可以直接宣战来源
					is_landed = yes
					highest_held_title_tier >= tier_county
					OR = {
						is_independent_ruler = yes
						liege = { is_liege_or_above_of = scope:actor }
					}
				}
			}
			#进攻概率
			random_list = {
				100 = {
				}
				50 = { 
					#人物狂热值
					modifier = { 
						add = ai_zeal
					}
					#人物精力值
					modifier = { 
						add = ai_energy
					}
					modifier = { #兵力不够不打
						#至少要有0.5的兵力才打，每多一倍概率翻倍
						factor = {
							value = max_military_strength
							divide = { value = scope:4VA_from.max_military_strength min = 1 }
							add = -0.5
						}
					}
					#处于战争不打
					modifier = {
						add = -1000
						is_at_war = yes
					}
					#有和约或者盟约不打
					modifier = { 
						add = -1000
						has_truce = scope:4VA_from
					}
					modifier = { 
						add = -1000
						is_allied_to = scope:4VA_from
					}
					modifier = { #奴隶不打奴隶 
						add = -1000
						is_tentacle_slave = yes
					}
					#确定攻击目标
					scope:4VA_from = {
						save_scope_as = target_character
						save_scope_as = recipient
					}
					random_character_to_title_neighboring_and_across_water_county = { #优先攻击相邻地区
						limit = {
							holder = {
								target_is_same_character_or_above = scope:4VA_from
							}
							building_max_garrison <= scope:actor.max_military_strength #能围下来
						}
						save_scope_as = target_county
					}
					if = { #否则就打首都
						limit = {
							NOT = { exists = scope:target_county }
							scope:target_character.capital_county.building_max_garrison <= scope:actor.max_military_strength #能围下首都
						}
						scope:target_character = {
							capital_county = {
								save_scope_as = target_county
							}
						}
					}
					if = {
						limit = {
							exists = scope:target_county
							war_declarer_needs_hook_on_liege = no #不需要领主同意就能发动战争
							scope:target_character = { #攻击目标为触手宗教
								is_tentacleswarm_religion_character = yes
							}
						}
						scope:actor = { #进行宣战
							start_war = { 
								casus_belli = tentacleswarm_religious_war 
								target = scope:target_character
								target_title = scope:target_county.kingdom
							}
						}
					}
					
				}
			}
		}
	}
}
tentacleswarm_yearly_check.6001 = { #玩家恶堕结算
	hidden = yes
	trigger = {
	}
	immediate = {
		set_variable = {
			name = tentacleswarm_ovarian_degeneration
			value = tentacleswarm_ovarian_degeneration_change_value
		}
		set_variable = {
			name = tentacleswarm_uterine_degeneration
			value = tentacleswarm_uterine_degeneration_change_value
		}
		set_variable = {
			name = tentacleswarm_vaginal_degeneration
			value = tentacleswarm_vaginal_degeneration_change_value
		}
		set_variable = {
			name = tentacleswarm_cum_value
			value = tentacleswarm_cum_change_value
		}
		trigger_event = {
			on_action = tentacleswarm_degeration_player_pulse
			days = 1
		}
	}
}