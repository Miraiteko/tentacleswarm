#腐化阴谋事件
namespace = tentacle_corrupt_scheme
#0001预处理
#1001样板水井杀
#9999让非领主的ai能够发起腐化阴谋

#阴谋就位
tentacle_corrupt_scheme.0001 = {
	hidden = yes

	immediate = {
		add_character_flag = { #Only resolve one abduction in the same day
			flag = is_in_event_tentacle_corrupt_outcome_0001
			days = 1
		}
		trigger_event = {
			on_action = tentacle_corrupt_setup #挑选方法
		}
	}
}
#水井投放
tentacle_corrupt_scheme.1001 = {
	type = character_event
	title = tentacle_corrupt_scheme.1001.t
	desc = tentacle_corrupt_scheme.1001.desc
	
	theme = intrigue
	left_portrait = {
		character = scope:target
		animation = personality_coward
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	immediate = {
		#计算被发现概率
		save_scope_value_as = {
			name = discovery_chance
			value = {
				value = 100
				subtract = scope:scheme.scheme_secrecy
			}
		}
	}
	
	#搞起
	option = {
		name = tentacle_corrupt_scheme.1001.a
		#判断是否被发现
		random = {
			chance = scope:discovery_chance
			custom_tooltip = tentacle_corrupt_scheme_become_discovered_roll_tt
			save_scope_value_as = {
				name = scheme_discovered
				value = yes
			}
		}
		#判断是否成功
		random = {
			chance = scope:scheme.scheme_success_chance
			custom_tooltip = tentacle_corrupt_scheme_successful_roll_tt
			save_scope_value_as = {
				name = scheme_successful
				value = yes
			}
		}
		#执行计划
		trigger_event = tentacle_corrupt_scheme.1002
		ai_chance = {
			base = 100
		}
	}
	#等等
	option = {
		name = tentacle_corrupt_scheme.1001.b
		custom_tooltip = do_not_execute_tentacle_corrupt_tooltip

		scope:scheme = {
			add_scheme_progress = -5 # Reset scheme progress
		}

		ai_chance = {
			base = 0
		}
		stress_impact = {
			impatient = medium_stress_impact_gain
			stubborn = medium_stress_impact_gain
		}
	}
}
#判断是否成功
tentacle_corrupt_scheme.1002 = {
	hidden = yes
	immediate = {
		#成功了
		if = {
			limit = {
				exists = scope:scheme_successful
			}
			trigger_event = tentacle_corrupt_scheme.1003
		}
		#失败了
		else = {
			trigger_event = tentacle_corrupt_scheme.1004
		}
	}
}
#成功了
tentacle_corrupt_scheme.1003 = {
	type = character_event
	title = tentacle_corrupt_scheme.1003.t
	desc = tentacle_corrupt_scheme.1003.desc
	
	theme = intrigue
	left_portrait = {
		character = scope:target
		animation = rage
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	immediate = {
		custom_tooltip = tentacle_corrupt_scheme_successful_roll_tt
		scope:target = {
			trigger_event = tentacleswarm_scene.0010 #目标触发水井杀
		}
		#被发现了
		if = {
			limit = {
				exists = scope:scheme_discovered
			}
			scope:owner = {
				random_secret = {
					limit = { 
						secret_type = secret_tentacle_slave 
						NOT = { is_known_by = scope:target }
					}
					reveal_to = scope:target
				}
			}
		}
	}
	option = { #恶堕完成了
		name = tentacle_corrupt_scheme.1003.a
		trigger = {
			scope:target = { is_tentacle_slave = yes }
		}
		scope:target = {
			random_secret = {
				limit = { 
					secret_type = secret_tentacle_slave 
					NOT = { is_known_by = scope:owner }
				}
				reveal_to = scope:owner
			}
		}
		ai_chance = {
			base = 100
		}
	}
	option = { #恶堕加深了
		name = tentacle_corrupt_scheme.1003.b
		trigger = {
			scope:target = { 
				is_tentacle_slave = no 
				NOT = { has_character_flag = tentacle_corrupt_reject_success }
			}
		}
		scope:target = {
			#custom_tooltip = tentacle_corruption_perk_add.tt
		}
		scope:scheme = {
			add_scheme_progress = -3
		}
		ai_chance = {
			base = 100
		}
	}
	option = { #目标抵制了恶堕
		name = tentacle_corrupt_scheme.1003.c
		trigger = {
			scope:target = { 
				is_tentacle_slave = no 
				has_character_flag = tentacle_corrupt_reject_success
			}
		}
		scope:target = {
			#custom_tooltip = tentacle_corrupt_reject_success.tt
		}
		scope:scheme = {
			add_scheme_progress = -3
		}
		ai_chance = {
			base = 100
		}
	}
}
#失败了
tentacle_corrupt_scheme.1004 = {
	type = character_event
	title = tentacle_corrupt_scheme.1004.t
	desc = tentacle_corrupt_scheme.1004.desc
	
	theme = intrigue
	left_portrait = {
		character = scope:target
		animation = rage
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	immediate = {
		#被发现了
		if = {
			limit = {
				exists = scope:scheme_discovered
			}
			scope:owner = {
				random_secret = {
					limit = { 
						secret_type = secret_tentacle_slave 
						NOT = { is_known_by = scope:target }
					}
					reveal_to = scope:target
				}
			}
		}
	}
	option = { #下回继续
		name = tentacle_corrupt_scheme.1004.a
		scope:scheme = {
			add_scheme_progress = -3
		}
		ai_chance = {
			base = 100
		}
	}
}

tentacle_corrupt_scheme.9999 = {
	hidden = yes

	trigger = { 
		#ai
		is_ai = yes
		#能够发起腐化密谋
		has_perk = tentacle_corruption_42_perk
		#至少要有一些阴谋能力
		intrigue >= 8
		#快死奴隶就不要占用资源了，反正也完不成
		is_tentaclable_female = yes
		#腐化密谋数量没用完
		trigger_if = {
			limit = { has_perk = tentacle_corruption_62_perk }
			any_scheme = {
				count < 3
				scheme_type = tentacle_corrupt
			}
		}
		trigger_else = {
			any_scheme = {
				count < 1
				scheme_type = tentacle_corrupt
			}
		}
	}
	immediate = {
		save_scope_as = actor
		
		#寻找潜在的腐化目标
		if = {
			#如果只能腐化自己宫廷
			limit = { 
				NOT = { has_perk = tentacle_corruption_52_perk }
			}
			if = {
				limit = {
					is_ruler = yes
				}
				random_courtier_or_guest = {
					limit = {
						is_tentaclable_female = yes
						is_imprisoned = no
						NOT = { THIS = scope:actor }
						NOT = { is_tentacle_slave_known_by = { CHARACTER = scope:actor } }
						NOT = { has_strong_hook = scope:actor }
						scope:actor = {
							can_start_scheme = {
								type = tentacle_corrupt
								target = PREV
							}
						}
					}
					save_scope_as = recipient
				}
			}
			else_if = {
				limit = {
					exists = liege_or_court_owner
				}
				liege_or_court_owner = {
					random_courtier_or_guest = {
						limit = {
							is_tentaclable_female = yes
							is_imprisoned = no
							NOT = { THIS = scope:actor }
							NOT = { is_tentacle_slave_known_by = { CHARACTER = scope:actor } }
							NOT = { has_strong_hook = scope:actor }
							scope:actor = {
								can_start_scheme = {
									type = tentacle_corrupt
									target = PREV
								}
							}
						}
						save_scope_as = recipient
					}
				}
			}
		}
		else = { #如果拥有远程腐化的能力，开始跳转搜寻腐化目标
			#如果没有搜寻过目标，指定自己，为起点
			if = {
				limit = { 
					NOT = { has_variable = tentacle_corrupt_scheme_target }
				}
				set_variable = {
					name = tentacle_corrupt_scheme_target
					value = scope:actor
				}
			}
			#如果目标不合法了，指定自己，为起点
			if = {
				limit = { 
					var:tentacle_corrupt_scheme_target = {
						OR = {
							is_alive = no
							is_pool_character = yes
							NOT = { in_diplomatic_range = scope:actor }
						}
					}
				}
				set_variable = {
					name = tentacle_corrupt_scheme_target
					value = scope:actor
				}
			}
			if = { #如果目标有位置,寻找当前位置宫廷的持有者成为目标
				limit = {
					exists = var:tentacle_corrupt_scheme_target.location
					exists = var:tentacle_corrupt_scheme_target.location.county
					exists = var:tentacle_corrupt_scheme_target.location.county.holder
				}
				set_variable = {
					name = tentacle_corrupt_scheme_target
					value = var:tentacle_corrupt_scheme_target.location.county.holder
				}
			}
			#针对目标所在宫廷发起腐化
			var:tentacle_corrupt_scheme_target = { 
				if = { #目标自己
					limit = {
						is_tentaclable_female = yes
						effective_age <= 35
						is_imprisoned = no
						NOT = { THIS = scope:actor }
						NOT = { is_tentacle_slave_known_by = { CHARACTER = scope:actor } }
						NOT = { has_strong_hook = scope:actor }
						scope:actor = {
							can_start_scheme = {
								type = tentacle_corrupt
								target = PREV
							}
						}
					}
					save_scope_as = recipient
				}
				#考虑一下目标的夫人？
				if = {
					limit = {
						NOT = { exists = scope:recipient }
					}
					random_spouse = {
						limit = {
							is_tentaclable_female = yes
							effective_age <= 35
							is_imprisoned = no
							NOT = { THIS = scope:actor }
							NOT = { is_tentacle_slave_known_by = { CHARACTER = scope:actor } }
							NOT = { has_strong_hook = scope:actor }
							scope:actor = {
								can_start_scheme = {
									type = tentacle_corrupt
									target = PREV
								}
							}
						}
						save_scope_as = recipient
					}
				}
				#考虑一下目标的亲人？
				if = {
					limit = {
						NOT = { exists = scope:recipient }
					}
					random_close_family_member = {
						limit = {
							is_tentaclable_female = yes
							effective_age <= 35
							is_imprisoned = no
							NOT = { THIS = scope:actor }
							NOT = { is_tentacle_slave_known_by = { CHARACTER = scope:actor } }
							NOT = { has_strong_hook = scope:actor }
							scope:actor = {
								can_start_scheme = {
									type = tentacle_corrupt
									target = PREV
								}
							}
						}
						save_scope_as = recipient
					}
				}
				#考虑一下目标的其他廷臣？
				if = {
					limit = {
						NOT = { exists = scope:recipient }
					}
					random_courtier_or_guest = {
						limit = {
							is_tentaclable_female = yes
							effective_age <= 35
							is_imprisoned = no
							NOT = { THIS = scope:actor }
							NOT = { is_tentacle_slave_known_by = { CHARACTER = scope:actor } }
							NOT = { has_strong_hook = scope:actor }
							scope:actor = {
								can_start_scheme = {
									type = tentacle_corrupt
									target = PREV
								}
							}
						}
						save_scope_as = recipient
					}
				}
			}
			#目标跳转,附近领主或者亲属
			var:tentacle_corrupt_scheme_target = {
				if = {
					limit = { is_landed = yes }
					random_character_to_title_neighboring_and_across_water_county = {
						holder = {
							save_scope_as = new_target
						}
					}
				}
				else = {
					random_close_or_extended_family_member = {
						save_scope_as = new_target
					}
				}
			}
			if = {
				limit = {
					exists = scope:new_target
				}
				set_variable = {
					name = tentacle_corrupt_scheme_target
					value = scope:new_target
				}
			}
		}
		#发动腐化计谋
		if = {
			limit = {
				exists = scope:recipient
			}
			start_scheme = {
				type = tentacle_corrupt
				target = scope:recipient
			}
		}
	}
}