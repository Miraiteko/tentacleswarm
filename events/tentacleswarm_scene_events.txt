#触手袭击事件
namespace = tentacleswarm_scene
#0011经典水井杀
#0021天生奴隶
#0031主动要求赐福
#0041被监禁者腐化
#0051同意被腐化
#0061蠕动的床铺
#0071半路
#0081精神崩溃
#0091古堡探险
#0101遗世之曦
#1001奴隶健康崩溃事件

#水井杀，样板戏
#一个触手样板戏应该包括起承转合四部分
#起：故事的起因，主人公是在什么背景下受到触手的袭击的。此处不应该出现触手侵害过程的描述。可以用来处理一些条件判断
#承：故事的发展，主人公是如何被触手抓获的，以及侵害进行的过程。这里应该针对主人公的现状（是否是奴隶，是否怀孕，是否有意被腐化）进行分类描述。
#转：故事的高潮，主人公是如何恶堕的。这一部分事件通过perk_event来实现，即便故事背景不同，也有统一的描述。
#合：故事的收尾，主人公是如何恢复神智的。

#水井杀预处理，避免同一时机多个遇害事件
tentacleswarm_scene.0010 = {
	hidden = yes
	trigger = {
		is_tentaclable_female = yes
	}
	immediate = {
		if = {
			limit = {
				NOT = { has_character_flag = is_being_tentacled }
			}
			#触发主事件
			add_character_flag = { #每七天只会被触手袭击一次，避免过多的弹窗
				flag = is_being_tentacled
				days = 7
			}
			trigger_event = {
				id = tentacleswarm_scene.0011
			}
		}
		else = {
			#推迟触发
			trigger_event = {
				id = tentacleswarm_scene.0010
				days = 7
			}
		}
	}
	#随机抽取触手事件的时候，被抽到的可能性的修正
	weight_multiplier = { 
		base = 1
		
		modifier = { #少许仆从，较少发生要自己打水的情况
			factor = 0.3
			exists = court_owner
			court_owner = {
				has_royal_court = yes
				amenity_level = {
					type = court_servants
					value >= 2
				}
			}
		}
		modifier = { #众多仆从，不再发生要自己打水的情况
			factor = 0
			exists = court_owner
			court_owner = {
				has_royal_court = yes
				amenity_level = {
					type = court_servants
					value >= 4
				}
			}
		}
		modifier = { #囚禁在地牢里
			factor = 0
			is_in_prison_type = dungeon
		}
	}
}
#水井杀起
tentacleswarm_scene.0011 = {
	type = character_event
	title = tentacleswarm_scene.0011.t
	desc = tentacleswarm_scene.0011.desc #故事背景的介绍
	
	theme = tentacleswarm_scene_theme_1
	left_portrait = this
	
	immediate = {
		play_music_cue = mx_cue_tentacleswarm_scene_theme_1
	}
	option = { #主人公在这个故事背景里面的反应
		name = tentacleswarm_scene.0011.a
		play_music_cue = mx_cue_tentacleswarm_scene_theme_2
		trigger_event= {
			id = tentacleswarm_scene.0012
		}
	}
}
#水井杀承
tentacleswarm_scene.0012 = {
	type = character_event
	title = tentacleswarm_scene.t	
	desc = {
		#如何被抓获的
		desc = tentacleswarm_scene.0012.desc
		#根据是否是奴隶，是否怀孕，选择被侵害时的文本
		first_valid = {
			triggered_desc = {
				trigger = {
					is_tentacle_slave = yes
					NOT = { has_trait = pregnant }
				}
				desc = tentacleswarm_scene.slave_not_pregnant
			}
			triggered_desc = {
				trigger = {
					is_tentacle_slave = yes
					has_trait = pregnant
				}
				desc = tentacleswarm_scene.slave_pregnant
			}
			triggered_desc = {
				trigger = {
					is_tentacle_slave = no
					NOT = { has_trait = pregnant }
				}
				desc = tentacleswarm_scene.not_slave_not_pregnant
			}
			triggered_desc = {
				trigger = {
					is_tentacle_slave = no
					has_trait = pregnant
				}
				desc = tentacleswarm_scene.not_slave_pregnant
			}
		} 
	}
	theme = tentacleswarm_scene_theme_2
	left_portrait = {
		character = this
		animation = shock
	}
	#已经发生的事件，被触手主人侵袭了
	immediate = {
		tentacle_corrupt_effect = yes
	}
	#下面的选项决定主人公是否屈服于主人，不抵抗腐化
	#接受tentacle_corrupt_accept_effect将导致【转】部分的恶堕事件
	#拒绝tentacle_corrupt_reject_effect计算是否成功抵抗
	#如果抵抗失败了依然导致恶堕事件，否则只有提示横幅，然后跳过【转】部分。
	
	#接受选项
	option = {
		name = tentacleswarm_scene.accept_slave #奴隶接受文本
		trigger = {
			is_tentacle_slave = yes
		}
		tentacle_corrupt_accept_effect = yes
		ai_chance = {
			base = 100
			ai_accept_corrupt_modifier = yes
		}
	}
	option = {
		name = tentacleswarm_scene.accept #非奴隶接受文本
		trigger = {
			is_tentacle_slave = no
		}
		tentacle_corrupt_accept_effect = yes
		ai_chance = {
			base = 100
			ai_accept_corrupt_modifier = yes
		}
	}
	#拒绝选项
	option = {
		trigger = {  
			NOT = { has_perk = tentacle_corruption_22_perk } #如果瘴气成瘾了，这个选项不能选
		}
		show_as_unavailable = {
			is_tentacle_slave = no
			has_perk = tentacle_corruption_22_perk #如果是触手奴隶了，这个选项看不到
		}
		name = tentacleswarm_scene.reject
		tentacle_corrupt_reject_effect = yes
		ai_chance = {
			base = 100
			ai_reject_corrupt_modifier = yes
		}
	}
	#一天之后，结算【合】部分
	after = {
		trigger_event= {
			id = tentacleswarm_scene.0013
			days = 1
		}
	}
}
#水井杀合
tentacleswarm_scene.0013 = {
	type = character_event
	title = tentacleswarm_scene.0013.t
	desc = { #尾声
		#根据是否是奴隶，选择尾声时的文本
		first_valid = {
			triggered_desc = {
				trigger = {
					OR = {
						is_tentacle_slave = yes
						has_character_flag = willing_to_be_corrupted
					}
				}
				desc = tentacleswarm_scene.0013.desc1
			}
			triggered_desc = {
				trigger = {
					always = yes
				}
				desc = tentacleswarm_scene.0013.desc2
			}
		} 
	}
	 
	theme = tentacleswarm_scene_theme_4
	left_portrait = {
		character = this
		animation = personality_coward #乖巧
	}
	immediate = { 
		play_music_cue = mx_cue_tentacleswarm_scene_theme_4
	}
	option = {
		name = tentacleswarm_scene.0013.a #开心
		trigger = {  
			OR = {
				is_tentacle_slave = yes
				has_character_flag = willing_to_be_corrupted
			}
		}
	}
	option = {
		name = tentacleswarm_scene.0013.b #厌恶
		trigger = {  
			NOR = {
				is_tentacle_slave = yes
				has_character_flag = willing_to_be_corrupted
			}
		}
	}
	after = {
		#在这里可以清理一下各种flag什么的
	}
}

#天生奴隶腐化，15岁触发
tentacleswarm_scene.0021 = {
	type = character_event
	title = tentacleswarm_scene.0021.t
	desc = tentacleswarm_scene.0021.desc
	
	theme = tentacleswarm_scene_theme_3
	left_portrait = this
	 
	trigger = {
		#is_tentaclable_female = yes #15岁，不是适龄
		is_tentacle_slave = no
	}
	immediate = {
		add_perk = tentacle_corruption_01_perk
		add_perk = tentacle_corruption_11_perk
		add_perk = tentacle_corruption_12_perk
	}
	option = {
		name = tentacleswarm_scene.0021.a
		add_perk = tentacle_corruption_21_perk
		add_perk = tentacle_corruption_22_perk
		
		ai_chance = {
			base = 99
		}
	}
	option = {
		trigger = {
			is_tentacle_slave = no
		}
		show_as_unavailable = { 
			is_tentacle_slave = no
		}
		name = tentacleswarm_scene.0021.b
		add_stress = 100 
		
		ai_chance = {
			base = 1
		}
	}
}
#要求赐福
tentacleswarm_scene.0030 = {
	hidden = yes
	trigger = {
		is_tentaclable_female = yes
		OR = {
			is_tentacle_slave = yes 
			has_religion = religion:tentacleswarm_religion
		}
	}
	immediate = {
		if = {
			limit = {
				NOT = { has_character_flag = is_being_tentacled }
			}
			#触发主事件
			add_character_flag = {
				flag = is_being_tentacled
				days = 7
			}
			trigger_event = {
				id = tentacleswarm_scene.0031
			}
		}
		else = {
			#推迟触发
			trigger_event = {
				id = tentacleswarm_scene.0030
				days = 7
			}
		}
	}
}
tentacleswarm_scene.0031 = {
	type = character_event
	title = tentacleswarm_scene.0031.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					#已经是奴隶了
					is_tentacle_slave = yes
				}
				desc = tentacleswarm_scene.0031.desc
			}
			triggered_desc = {
				trigger = { #第一次
					NOT = { has_perk = tentacle_corruption_01_perk }
				}
				desc = tentacleswarm_scene.0031.desc1
			}
			triggered_desc = { 
				trigger = { #最后一次
					has_perk = tentacle_corruption_21_perk 
					has_perk = tentacle_corruption_22_perk 
				}
				desc = tentacleswarm_scene.0031.desc3
			}
			triggered_desc = {
				trigger = { #其他情况
					always = yes
				}
				desc = tentacleswarm_scene.0031.desc2
			}
		}
	}
	theme = tentacleswarm_scene_theme_1
	override_background = { event_background = temple }
	left_portrait = {
		character = this
		animation = personality_zealous
	}
	
	immediate = {
		if = {
			limit = { 
				NOT = { has_character_flag = willing_to_be_corrupted } 
			}
			add_character_flag = willing_to_be_corrupted
		}
	}
	option = {
		name = tentacleswarm_scene.0031.a
		trigger_event = {
			id = tentacleswarm_scene.0032
		}
	}
}
tentacleswarm_scene.0032 = {
	type = character_event
	title = tentacleswarm_scene.0032.t
	desc = {
		#如何被抓获的
		desc = tentacleswarm_scene.0032.desc
		#根据是否是奴隶，是否怀孕，选择被侵害时的文本
		first_valid = {
			triggered_desc = {
				trigger = {
					is_tentacle_slave = yes
					NOT = { has_trait = pregnant }
				}
				desc = tentacleswarm_scene.slave_not_pregnant
			}
			triggered_desc = {
				trigger = {
					is_tentacle_slave = yes
					has_trait = pregnant
				}
				desc = tentacleswarm_scene.slave_pregnant
			}
			triggered_desc = {
				trigger = {
					is_tentacle_slave = no
					NOT = { has_trait = pregnant }
				}
				desc = tentacleswarm_scene.not_slave_not_pregnant
			}
			triggered_desc = {
				trigger = {
					is_tentacle_slave = no
					has_trait = pregnant
				}
				desc = tentacleswarm_scene.not_slave_pregnant
			}
		} 
	}
	theme = tentacleswarm_scene_theme_2
	override_background = { event_background = temple }
	left_portrait = {
		character = root
		animation = happiness
	}
	 
	immediate = {
		tentacle_corrupt_effect = yes
	}
	option = {
		name = tentacleswarm_scene.0032.a
		tentacle_corrupt_accept_effect = yes
		
		ai_chance = {
			base = 1000 #被赐福的情况下，更有可能接受
			ai_accept_corrupt_modifier = yes
		}
	}
	option = {
		trigger = {  
			NOT = { has_perk = tentacle_corruption_22_perk }
		}
		show_as_unavailable = {
			NOT = { has_perk = tentacle_corruption_31_perk }
			has_perk = tentacle_corruption_22_perk
		}
		name = tentacleswarm_scene.refuse
		tentacle_corrupt_reject_effect = yes
		
		ai_chance = {
			base = 100
			ai_reject_corrupt_modifier = yes
		}
	}
	after = {
		trigger_event = {
			id = tentacleswarm_scene.0033
			days = 1
		}
	}
}

tentacleswarm_scene.0033 = {
	type = character_event
	title = tentacleswarm_scene.0033.t
	desc = { #尾声
		#根据是否是奴隶，选择尾声时的文本
		first_valid = {
			triggered_desc = {
				trigger = {
					is_tentacle_slave = yes
				}
				desc = tentacleswarm_scene.0033.desc1
			}
			triggered_desc = {
				trigger = {
					always = yes
				}
				desc = tentacleswarm_scene.0033.desc2
			}
		} 
	}
	theme = tentacleswarm_scene_theme_4
	override_background = { event_background = temple }
	left_portrait = {
		character = this
		animation = personality_coward #乖巧
	}
	option = {
		name = tentacleswarm_scene.0033.a #开心
	}
	after = {
	}
}
#被囚禁者腐化
#预处理
tentacleswarm_scene.0040 = {
	hidden = yes
	trigger = {
		is_tentaclable_female = yes
		is_imprisoned_by = scope:imprisoner
	}
	immediate = {
		save_scope_as = recipient
		if = {
			limit = {
				NOT = { has_character_flag = is_being_tentacled }
			}
			#触发主事件
			add_character_flag = {
				flag = is_being_tentacled
				days = 7
			}
			trigger_event = {
				id = tentacleswarm_scene.0041
			}
		}
		else = {
			#推迟触发
			trigger_event = {
				id = tentacleswarm_scene.0040
				days = 7
			}
		}
	}
}
#起
tentacleswarm_scene.0041 = {
	type = character_event
	title = tentacleswarm_scene.0041.t
	desc = tentacleswarm_scene.0041.desc
	theme = tentacleswarm_scene_theme_1
	override_background = { event_background = dungeon }
	left_portrait = this
	right_portrait = scope:imprisoner
	 
	option = {
		name = tentacleswarm_scene.0041.a
		trigger_event = {
			id = tentacleswarm_scene.0042
		}
	}
}
#承
tentacleswarm_scene.0042 = {
	type = character_event
	title = tentacleswarm_scene.0042.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					is_tentacle_slave = yes
					is_pregnant_nature_or_tentacle = no
				}
				desc = tentacleswarm_scene.0042.desc1
			}
			triggered_desc = {
				trigger = {
					is_tentacle_slave = yes
					is_pregnant_nature_or_tentacle = yes
				}
				desc = tentacleswarm_scene.0042.desc2
			}
			triggered_desc = {
				trigger = {
					is_tentacle_slave = no
					is_pregnant_nature_or_tentacle = no
				}
				desc = tentacleswarm_scene.0042.desc3
			}
			triggered_desc = {
				trigger = {
					always = yes
				}
				desc = tentacleswarm_scene.0042.desc4
			}
		}
	}
	theme = tentacleswarm_scene_theme_2
	override_background = { event_background = dungeon }
	left_portrait = {
		character = this
		animation = personality_zealous
	}
	
	right_portrait = scope:imprisoner
	 
	immediate = {
		tentacle_corrupt_effect = yes
	}
	option = {
		name = tentacleswarm_scene.accept
		tentacle_corrupt_accept_effect = yes
		
		ai_chance = {
			base = 100
			ai_accept_corrupt_modifier = yes
		}
	}
	option = {
		trigger = {  
			NOT = { has_perk = tentacle_corruption_22_perk }
		}
		show_as_unavailable = {
			NOT = { has_perk = tentacle_corruption_31_perk }
			has_perk = tentacle_corruption_22_perk
		}
		name = tentacleswarm_scene.reject
		tentacle_corrupt_reject_effect = yes
		
		ai_chance = {
			base = 100
			ai_reject_corrupt_modifier = yes
		}
	}
	#一天之后，结算【合】部分
	after = {
		trigger_event= {
			id = tentacleswarm_scene.0043
			days = 1
		}
		scope:imprisoner = {
			trigger_event= {
				id = tentacleswarm_scene.0044
				days = 1
			}
		}
	}
}
#合
tentacleswarm_scene.0043 = {
	type = character_event
	title = tentacleswarm_scene.0043.t
	desc = { #尾声
		#根据是否是奴隶，选择尾声时的文本
		first_valid = {
			triggered_desc = {
				trigger = {
					is_tentacle_slave = yes
				}
				desc = tentacleswarm_scene.0043.desc1
			}
			triggered_desc = {
				trigger = {
					always = yes
				}
				desc = tentacleswarm_scene.0043.desc2
			}
		} 
	}
	
	theme = tentacleswarm_scene_theme_4
	override_background = { event_background = dungeon }
	left_portrait = {
		character = this
		animation = personality_coward #乖巧
	}
	right_portrait = scope:imprisoner
	option = {
		name = tentacleswarm_scene.0043.a #开心
		trigger = {  
			OR = {
				is_tentacle_slave = yes
				has_character_flag = willing_to_be_corrupted
			}
		}
	}
	option = {
		name = tentacleswarm_scene.0043.b #厌恶
		trigger = {  
			NOR = {
				is_tentacle_slave = yes
				has_character_flag = willing_to_be_corrupted
			}
		}
	}
	after = {
	}
}
tentacleswarm_scene.0044 = {
	type = character_event
	title = tentacleswarm_scene.0044.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:recipient = {
						is_tentacle_slave = no
					}
				}
				desc = tentacleswarm_scene.0044.desc1
			}
			triggered_desc = {
				trigger = {
					always = yes
				}
				desc = tentacleswarm_scene.0044.desc2
			}
		} 
	}
	theme = tentacleswarm_scene_theme_2
	override_background = { event_background = dungeon }
	left_portrait = scope:recipient
	right_portrait = {
		character = this
		animation = personality_coward #乖巧
	}
	option = {
		name = tentacleswarm_scene.0044.a
		trigger = {
			scope:recipient = {
				is_tentacle_slave = no
			}
		}
	}
	option = {
		name = tentacleswarm_scene.0044.b
		trigger = {
			scope:recipient = {
				is_tentacle_slave = yes
			}
		}
		scope:recipient = {
			random_secret = {
				limit = { 
					secret_type = secret_tentacle_slave 
					NOT = { is_known_by = scope:imprisoner }
				}
				reveal_to = scope:imprisoner
			}
		}
	}
}
#引路人预处理
tentacleswarm_scene.0050 = {
	hidden = yes
	trigger = {
		is_tentacle_slave = no
		num_of_relation_tentacle_mentor > 0
	}
	immediate = {
		save_scope_as = tentacle_student
		#找到引路人
        random_relation = {
			type = tentacle_mentor
			save_scope_as = tentacle_mentor
		}
		if = {
			limit = {
				NOT = { has_character_flag = is_being_tentacled }
			}
			#触发主事件
			add_character_flag = {
				flag = is_being_tentacled
				days = 7
			}
			trigger_event = {
				id = tentacleswarm_scene.0051
			}
		}
		else = {
			#推迟触发
			trigger_event = {
				id = tentacleswarm_scene.0050
				days = 7
			}
		}
	}
}
#引路人起
tentacleswarm_scene.0051 = {
	type = character_event
	title = tentacleswarm_scene.0051.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = { #第一次
					NOT = { has_perk = tentacle_corruption_01_perk }
				}
				desc = tentacleswarm_scene.0051.desc1
			}
			triggered_desc = { 
				trigger = { #最后一次
					has_perk = tentacle_corruption_21_perk 
					has_perk = tentacle_corruption_22_perk 
				}
				desc = tentacleswarm_scene.0051.desc3
			}
			triggered_desc = {
				trigger = { #其他情况
					always = yes
				}
				desc = tentacleswarm_scene.0051.desc2
			}
		}
	}
	
	theme = tentacleswarm_scene_theme_1
	left_portrait = this
	right_portrait = scope:tentacle_mentor
	
	trigger = {
		is_tentaclable_female = yes
	}
	immediate = {
	}
	option = {
		name = tentacleswarm_scene.0051.a
		if = {
			limit = { 
				NOT = { has_character_flag = willing_to_be_corrupted } 
			}
			add_character_flag = willing_to_be_corrupted
		}
		#引路人被告知，之后再跳转到承部分
		scope:tentacle_mentor = {
			trigger_event= {
				id = tentacleswarm_scene.0054
			}
		}
		ai_chance = {
			base = 100
		}
	}
	option = {
		name = tentacleswarm_scene.0051.b #我不干了
		if = {
			limit = { 
				has_character_flag = willing_to_be_corrupted 
			}
			remove_character_flag = willing_to_be_corrupted
		}
		scope:tentacle_mentor = {
			trigger_event = {
				id = tentacleswarm_scene.0055
			}
		}
		remove_relation_tentacle_mentor = scope:tentacle_mentor
		ai_chance = {
			base = 1
		}
	}
}
#引路人承
tentacleswarm_scene.0052 = {
	type = character_event
	title = tentacleswarm_scene.t	
	desc = {
		desc = tentacleswarm_scene.0052.desc
		first_valid = {
			triggered_desc = {
				trigger = {
					is_tentacle_slave = yes
					NOT = { has_trait = pregnant }
				}
				desc = tentacleswarm_scene.slave_not_pregnant
			}
			triggered_desc = {
				trigger = {
					is_tentacle_slave = yes
					has_trait = pregnant
				}
				desc = tentacleswarm_scene.slave_pregnant
			}
			triggered_desc = {
				trigger = {
					is_tentacle_slave = no
					NOT = { has_trait = pregnant }
				}
				desc = tentacleswarm_scene.not_slave_not_pregnant
			}
			triggered_desc = {
				trigger = {
					is_tentacle_slave = no
					has_trait = pregnant
				}
				desc = tentacleswarm_scene.not_slave_pregnant
			}
		} 
	}
	theme = tentacleswarm_scene_theme_2
	left_portrait = {
		character = this
		animation = personality_zealous
	}
	right_portrait = {
		character = scope:tentacle_mentor
		animation = personality_coward #乖巧
	}
	
	immediate = {
		tentacle_corrupt_effect = yes
	}
	
	#接受选项
	option = {
		name = tentacleswarm_scene.accept_slave #奴隶接受文本
		trigger = {
			is_tentacle_slave = yes
		}
		tentacle_corrupt_accept_effect = yes
		ai_chance = {
			base = 100
			ai_accept_corrupt_modifier = yes
		}
	}
	option = {
		name = tentacleswarm_scene.accept #非奴隶接受文本
		trigger = {
			is_tentacle_slave = no
		}
		tentacle_corrupt_accept_effect = yes
		ai_chance = {
			base = 100
			ai_accept_corrupt_modifier = yes
		}
	}
	#拒绝选项
	option = {
		trigger = {  
			NOT = { has_perk = tentacle_corruption_22_perk } #如果瘴气成瘾了，这个选项不能选
		}
		show_as_unavailable = {
			is_tentacle_slave = no
			has_perk = tentacle_corruption_22_perk #如果是触手奴隶了，这个选项看不到
		}
		name = tentacleswarm_scene.reject
		tentacle_corrupt_reject_effect = yes
		ai_chance = {
			base = 100
			ai_reject_corrupt_modifier = yes
		}
	}
	#一天之后，结算【合】部分
	after = {
		trigger_event= {
			id = tentacleswarm_scene.0053
			days = 1
		}
	}
}
#引路人合
tentacleswarm_scene.0053 = {
	type = character_event
	title = tentacleswarm_scene.0013.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					is_tentacle_slave = no
				}
				desc = tentacleswarm_scene.0053.desc1
			}
			triggered_desc = {
				trigger = {
					always = yes
				}
				desc = tentacleswarm_scene.0053.desc2
			}
		} 
	}
	
	theme = tentacleswarm_scene_theme_4
	left_portrait = {
		character = this
		animation = personality_coward #乖巧
	}
	right_portrait = {
		character = scope:tentacle_mentor
		animation = ecstasy #开心
	}
	option = {
		name = tentacleswarm_scene.0053.a #期待下一次
		trigger = {  
			is_tentacle_slave = no
		}
		custom_tooltip = tentacleswarm_scene.0053.a.tt
		trigger_event = {
			id = tentacleswarm_scene.0050
			days = 15
		}
	}
	option = {
		name = tentacleswarm_scene.0053.b #完成了
		trigger = {  
			is_tentacle_slave = yes
		}
		random_secret = {
			limit = { 
				secret_type = secret_tentacle_slave 
				NOT = { is_known_by = scope:tentacle_mentor }
			}
			reveal_to = scope:tentacle_mentor
		}
	}
	after = {
	}
}
#引路人被告知事件
tentacleswarm_scene.0054 = {
	type = character_event
	title = tentacleswarm_scene.0054.t	
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = { #第一次
					scope:tentacle_student = {
						NOT = { has_perk = tentacle_corruption_01_perk }
					}
				}
				desc = tentacleswarm_scene.0054.desc1
			}
			triggered_desc = { 
				trigger = { #最后一次
					scope:tentacle_student = {
						has_perk = tentacle_corruption_21_perk 
						has_perk = tentacle_corruption_22_perk 
					}
				}
				desc = tentacleswarm_scene.0054.desc3
			}
			triggered_desc = {
				trigger = { #其他情况
					always = yes
				}
				desc = tentacleswarm_scene.0054.desc2
			}
		}
	}
	theme = tentacleswarm_scene_theme_2
	left_portrait = {
		character = scope:tentacle_student
		animation = personality_zealous
	}
	right_portrait = {
		character = scope:tentacle_mentor
		animation = personality_coward
	}
	
	immediate = {
		scope:tentacle_student = {
			trigger_event = {
				id = tentacleswarm_scene.0052 #承
			}
		}
	}
	
	option = {
		name = tentacleswarm_scene.0054.a
		trigger = {
			NOT = {
				scope:tentacle_student = {
					has_perk = tentacle_corruption_21_perk 
					has_perk = tentacle_corruption_22_perk 
				}
			}
		}
	}
	option = { #最后一次事件
		name = tentacleswarm_scene.0054.b
		trigger = {
			scope:tentacle_student = {
				has_perk = tentacle_corruption_21_perk 
				has_perk = tentacle_corruption_22_perk 
			}
		}
	}
}
tentacleswarm_scene.0055 = {
	type = character_event
	title = tentacleswarm_scene.0055.t	
	desc = tentacleswarm_scene.0055.desc
	theme = seduction
	left_portrait = {
		character = scope:tentacle_student
		animation = shock
	}
	right_portrait = {
		character = scope:tentacle_mentor
		animation = personality_coward
	}
	option = {
		name = tentacleswarm_scene.0055.a
		show_as_tooltip = {
			remove_relation_tentacle_student = scope:tentacle_student
		}
	}
}

#蠕动的床铺
#预处理
tentacleswarm_scene.0060 = {
	hidden = yes
	trigger = {
		is_tentaclable_female = yes
	}
	immediate = {
		if = {
			limit = {
				NOT = { has_character_flag = is_being_tentacled }
			}
			#触发主事件
			add_character_flag = { #每七天只会被触手袭击一次，避免过多的弹窗
				flag = is_being_tentacled
				days = 7
			}
			trigger_event = {
				id = tentacleswarm_scene.0061
			}
		}
		else = {
			#推迟触发
			trigger_event = {
				id = tentacleswarm_scene.0060
				days = 7
			}
		}
	}
	#随机抽取触手事件的时候，被抽到的可能性的修正
	weight_multiplier = { 
		base = 1
		
		modifier = { #中等住宿，没那么容易遇袭
			factor = 0.5
			exists = court_owner
			court_owner = {
				has_royal_court = yes
				amenity_level = {
					type = court_lodging_standards
					value >= 3
				}
			}
		}
		modifier = { #豪奢住宿，更不容易遇袭
			factor = 0.5
			exists = court_owner
			court_owner = {
				has_royal_court = yes
				amenity_level = {
					type = court_lodging_standards
					value >= 5
				}
			}
		}
	}
}
#蠕动的床铺起
tentacleswarm_scene.0061 = {
	type = character_event
	title = tentacleswarm_scene.0061.t
	desc = tentacleswarm_scene.0061.desc
	
	theme = tentacleswarm_scene_theme_1
	override_background = { event_background = bedchamber }
	left_portrait = this
	
	immediate = {
	}
	option = { #主人公在这个故事背景里面的反应
		name = tentacleswarm_scene.0061.a
		trigger_event= {
			id = tentacleswarm_scene.0062
		}
	}
}
#蠕动的床铺承
tentacleswarm_scene.0062 = {
	type = character_event
	title = tentacleswarm_scene.t	
	desc = {
		#如何被抓获的
		desc = tentacleswarm_scene.0062.desc
		#根据是否是奴隶，是否怀孕，选择被侵害时的文本
		first_valid = {
			triggered_desc = {
				trigger = {
					is_tentacle_slave = yes
					NOT = { has_trait = pregnant }
				}
				desc = tentacleswarm_scene.slave_not_pregnant
			}
			triggered_desc = {
				trigger = {
					is_tentacle_slave = yes
					has_trait = pregnant
				}
				desc = tentacleswarm_scene.slave_pregnant
			}
			triggered_desc = {
				trigger = {
					is_tentacle_slave = no
					NOT = { has_trait = pregnant }
				}
				desc = tentacleswarm_scene.not_slave_not_pregnant
			}
			triggered_desc = {
				trigger = {
					is_tentacle_slave = no
					has_trait = pregnant
				}
				desc = tentacleswarm_scene.not_slave_pregnant
			}
		} 
	}
	theme = tentacleswarm_scene_theme_2
	override_background = { event_background = bedchamber }
	left_portrait = {
		character = this
		animation = shock
	}
	#已经发生的事件，被触手主人侵袭了
	immediate = {
		tentacle_corrupt_effect = yes
	}
	#下面的选项决定主人公是否屈服于主人，不抵抗腐化
	#接受tentacle_corrupt_accept_effect将导致【转】部分的恶堕事件
	#拒绝tentacle_corrupt_reject_effect计算是否成功抵抗
	#如果抵抗失败了依然导致恶堕事件，否则只有提示横幅，然后跳过【转】部分。
	
	#接受选项
	option = {
		name = tentacleswarm_scene.accept_slave #奴隶接受文本
		trigger = {
			is_tentacle_slave = yes
		}
		tentacle_corrupt_accept_effect = yes
		ai_chance = {
			base = 100
			ai_accept_corrupt_modifier = yes
		}
	}
	option = {
		name = tentacleswarm_scene.accept #非奴隶接受文本
		trigger = {
			is_tentacle_slave = no
		}
		tentacle_corrupt_accept_effect = yes
		ai_chance = {
			base = 100
			ai_accept_corrupt_modifier = yes
		}
	}
	#拒绝选项
	option = {
		trigger = {  
			NOT = { has_perk = tentacle_corruption_22_perk } #如果瘴气成瘾了，这个选项不能选
		}
		show_as_unavailable = {
			is_tentacle_slave = no
			has_perk = tentacle_corruption_22_perk #如果是触手奴隶了，这个选项看不到
		}
		name = tentacleswarm_scene.reject
		tentacle_corrupt_reject_effect = yes
		ai_chance = {
			base = 100
			ai_reject_corrupt_modifier = yes
		}
	}
	#一天之后，结算【合】部分
	after = {
		trigger_event= {
			id = tentacleswarm_scene.0063
			days = 1
		}
	}
}
#蠕动的床铺合
tentacleswarm_scene.0063 = {
	type = character_event
	title = tentacleswarm_scene.0063.t
	desc = { #尾声
		#根据是否是奴隶，选择尾声时的文本
		first_valid = {
			triggered_desc = {
				trigger = {
					OR = {
						is_tentacle_slave = yes
						has_character_flag = willing_to_be_corrupted
					}
				}
				desc = tentacleswarm_scene.0063.desc1
			}
			triggered_desc = {
				trigger = {
					always = yes
				}
				desc = tentacleswarm_scene.0063.desc2
			}
		} 
	}
	
	theme = tentacleswarm_scene_theme_4
	override_background = { event_background = bedchamber }
	left_portrait = {
		character = this
		animation = personality_coward #乖巧
	}
	option = {
		name = tentacleswarm_scene.0063.a #开心
		trigger = {  
			OR = {
				is_tentacle_slave = yes
				has_character_flag = willing_to_be_corrupted
			}
		}
	}
	option = {
		name = tentacleswarm_scene.0063.b #厌恶
		trigger = {  
			NOR = {
				is_tentacle_slave = yes
				has_character_flag = willing_to_be_corrupted
			}
		}
	}
	after = {
		#在这里可以清理一下各种flag什么的
	}
}

#半路
#预处理
tentacleswarm_scene.0070 = {
	hidden = yes
	trigger = {
		is_tentaclable_female = yes
	}
	immediate = {
		if = {
			limit = {
				NOT = { has_character_flag = is_being_tentacled }
			}
			#触发主事件
			add_character_flag = { #每七天只会被触手袭击一次，避免过多的弹窗
				flag = is_being_tentacled
				days = 7
			}
			trigger_event = {
				id = tentacleswarm_scene.0071
			}
		}
		else = {
			#推迟触发
			trigger_event = {
				id = tentacleswarm_scene.0070
				days = 7
			}
		}
	}
	#随机抽取触手事件的时候，被抽到的可能性的修正
	weight_multiplier = { 
		base = 1
		
		modifier = { #被囚禁，不可能触发
			factor = 0
			is_imprisoned = yes
		}
		modifier = { #在活动中，很有可能触发
			factor = 2
			is_in_an_activity = yes
		}
	}
}
#半路起
tentacleswarm_scene.0071 = {
	type = character_event
	title = tentacleswarm_scene.0071.t
	desc = tentacleswarm_scene.0071.desc
	
	theme = tentacleswarm_scene_theme_1
	override_background = { event_background = wilderness }
	left_portrait = this
	
	immediate = {
	}
	option = { #主人公在这个故事背景里面的反应
		name = tentacleswarm_scene.0071.a
		trigger_event= {
			id = tentacleswarm_scene.0072
		}
	}
}
#半路承
tentacleswarm_scene.0072 = {
	type = character_event
	title = tentacleswarm_scene.t	
	desc = {
		#如何被抓获的
		desc = tentacleswarm_scene.0072.desc
		#根据是否是奴隶，是否怀孕，选择被侵害时的文本
		first_valid = {
			triggered_desc = {
				trigger = {
					is_tentacle_slave = yes
					NOT = { has_trait = pregnant }
				}
				desc = tentacleswarm_scene.slave_not_pregnant
			}
			triggered_desc = {
				trigger = {
					is_tentacle_slave = yes
					has_trait = pregnant
				}
				desc = tentacleswarm_scene.slave_pregnant
			}
			triggered_desc = {
				trigger = {
					is_tentacle_slave = no
					NOT = { has_trait = pregnant }
				}
				desc = tentacleswarm_scene.not_slave_not_pregnant
			}
			triggered_desc = {
				trigger = {
					is_tentacle_slave = no
					has_trait = pregnant
				}
				desc = tentacleswarm_scene.not_slave_pregnant
			}
		} 
	}
	theme = tentacleswarm_scene_theme_2
	override_background = { event_background = wilderness }
	left_portrait = {
		character = this
		animation = shock
	}
	#已经发生的事件，被触手主人侵袭了
	immediate = {
		tentacle_corrupt_effect = yes
	}
	#下面的选项决定主人公是否屈服于主人，不抵抗腐化
	#接受tentacle_corrupt_accept_effect将导致【转】部分的恶堕事件
	#拒绝tentacle_corrupt_reject_effect计算是否成功抵抗
	#如果抵抗失败了依然导致恶堕事件，否则只有提示横幅，然后跳过【转】部分。
	
	#接受选项
	option = {
		name = tentacleswarm_scene.accept_slave #奴隶接受文本
		trigger = {
			is_tentacle_slave = yes
		}
		tentacle_corrupt_accept_effect = yes
		ai_chance = {
			base = 100
			ai_accept_corrupt_modifier = yes
		}
	}
	option = {
		name = tentacleswarm_scene.accept #非奴隶接受文本
		trigger = {
			is_tentacle_slave = no
		}
		tentacle_corrupt_accept_effect = yes
		ai_chance = {
			base = 100
			ai_accept_corrupt_modifier = yes
		}
	}
	#拒绝选项
	option = {
		trigger = {  
			NOT = { has_perk = tentacle_corruption_22_perk } #如果瘴气成瘾了，这个选项不能选
		}
		show_as_unavailable = {
			is_tentacle_slave = no
			has_perk = tentacle_corruption_22_perk #如果是触手奴隶了，这个选项看不到
		}
		name = tentacleswarm_scene.reject
		tentacle_corrupt_reject_effect = yes
		ai_chance = {
			base = 100
			ai_reject_corrupt_modifier = yes
		}
	}
	#一天之后，结算【合】部分
	after = {
		trigger_event= {
			id = tentacleswarm_scene.0073
			days = 1
		}
	}
}
#半路合
tentacleswarm_scene.0073 = {
	type = character_event
	title = tentacleswarm_scene.0073.t
	desc = { #尾声
		#根据是否是奴隶，选择尾声时的文本
		first_valid = {
			triggered_desc = {
				trigger = {
					OR = {
						is_tentacle_slave = yes
						has_character_flag = willing_to_be_corrupted
					}
				}
				desc = tentacleswarm_scene.0073.desc1
			}
			triggered_desc = {
				trigger = {
					always = yes
				}
				desc = tentacleswarm_scene.0073.desc2
			}
		} 
	}
	
	theme = tentacleswarm_scene_theme_4
	override_background = { event_background = wilderness }
	left_portrait = {
		character = this
		animation = personality_coward #乖巧
	}
	option = {
		name = tentacleswarm_scene.0073.a #开心
		trigger = {  
			OR = {
				is_tentacle_slave = yes
				has_character_flag = willing_to_be_corrupted
			}
		}
	}
	option = {
		name = tentacleswarm_scene.0073.b #厌恶
		trigger = {  
			NOR = {
				is_tentacle_slave = yes
				has_character_flag = willing_to_be_corrupted
			}
		}
	}
	after = {
		#在这里可以清理一下各种flag什么的
	}
}
tentacleswarm_scene.1001 = {
	type = character_event
	title = tentacleswarm_scene.1001.t

	desc = tentacleswarm_scene.1001.desc

	left_portrait = {
		character = root
		animation = sick
	}
	theme = physical_health

	option = {
		name = {
			trigger = { has_trait = lazy }
			text = tentacleswarm_scene.1001.a.lazy
		}
		name = {
			trigger = { has_trait = lustful }
			text = tentacleswarm_scene.1001.a.lust
		}
		name = {
			text = tentacleswarm_scene.1001.a
		}

		if = {
			limit = { has_character_flag = immune_to_disease }
			remove_character_flag = immune_to_disease
		}
		
		add_trait = infirm

		stress_impact = {
			lazy = minor_stress_loss
			diligent = medium_stress_gain
			lustful = medium_stress_gain
		}
	}
}
#精神崩溃(未被囚禁)
tentacleswarm_scene.0081 = {
	type = character_event
	title = tentacleswarm_scene.0081.t
	desc = tentacleswarm_scene.0081.desc
	
	theme = mental_break
	left_portrait = {
		character = root
		animation = stress
	}
	trigger = {
		has_character_flag = is_being_tentacled
		is_tentacle_slave = no
	}
	weight_multiplier = {
		base = 100
	}
	widget = {
		gui = "event_window_widget_stress"
		container = "custom_widgets_container"
	}
	immediate = {
		ROOT = { save_scope_as = stress_character } # For stress widget


		#搜寻两个合适的减压选项，请求被腐化，放荡，蛰居
		#请求被腐化
		if = {
			limit = { NOT = { has_character_flag = stress_threshold_option_corruption } }
			random_known_secret = {
				limit = { 
					secret_owner = {
						is_ai = yes
						is_tentacle_slave_known_by = { CHARACTER = ROOT }
						ROOT = {
							is_character_interaction_valid = {
							   recipient = PREV
							   interaction = ask_for_tentacle_corruption_interaction
							}
						}
					}
				}
				secret_owner = {
					save_scope_as = tentacle_mentor
				}
				ROOT = { add_character_flag = stress_threshold_option_corruption }
			}
		}
		
		if = {
			limit = { NOT = { has_character_flag = stress_threshold_option_corruption } }
			random_close_or_extended_family_member = {
				limit = { 
					is_ai = yes
					is_tentacle_slave_known_by = { CHARACTER = ROOT }
					ROOT = {
						is_character_interaction_valid = {
						   recipient = PREV
						   interaction = ask_for_tentacle_corruption_interaction
						}
					}
				}
				save_scope_as = tentacle_mentor
				ROOT = { add_character_flag = stress_threshold_option_corruption }
			}
		}
		if = {
			limit = { NOT = { has_character_flag = stress_threshold_option_corruption } }
			random_liege_or_above = {
				limit = { 
					is_ai = yes
					is_tentacle_slave_known_by = { CHARACTER = ROOT }
					ROOT = {
						is_character_interaction_valid = {
						   recipient = PREV
						   interaction = ask_for_tentacle_corruption_interaction
						}
					}
				}
				save_scope_as = tentacle_mentor
				ROOT = { add_character_flag = stress_threshold_option_corruption }
			}
		}
		if = {
			limit = { NOT = { has_character_flag = stress_threshold_option_corruption } }
			random_courtier_or_guest = {
				limit = { 
					is_ai = yes
					is_tentacle_slave_known_by = { CHARACTER = ROOT }
					ROOT = {
						is_character_interaction_valid = {
						   recipient = PREV
						   interaction = ask_for_tentacle_corruption_interaction
						}
					}
				}
				save_scope_as = tentacle_mentor
				ROOT = { add_character_flag = stress_threshold_option_corruption }
			}
		}
		#放荡
		add_character_flag = stress_threshold_option_rakish
		#自戕
		if = {
			limit = {
				NOT = { has_character_flag = stress_threshold_option_corruption }
			}
			add_character_flag = stress_threshold_option_flagellant
		}
		#标记压力等级
		stress_threshold_event_post_immediate = yes
	} 
	#恶堕
	option = {
		trigger = {
			num_of_relation_tentacle_mentor = 0
			has_character_flag = stress_threshold_option_corruption
		}
		name = tentacleswarm_scene.0081.tentacle_slave.gain
		trait = tentacle_slave
		if = {
			limit = { 
				NOT = { has_character_flag = willing_to_be_corrupted } 
			}
			add_character_flag = willing_to_be_corrupted
		}
		set_relation_tentacle_mentor = scope:tentacle_mentor
		trigger_event = {
			id = tentacleswarm_scene.0050 #主动恶堕
		}
		ai_chance = {
			base = 100
			ai_accept_corrupt_modifier = yes
		}
	}
	#放荡
	option = {
		trigger = {
			has_character_flag = stress_threshold_option_rakish
		}
		name = {
			trigger = { NOT = { has_trait = rakish } }
			text = tentacleswarm_scene.0081.rakish.gain
		}
		name = {
			trigger = { has_trait = rakish }
			text = tentacleswarm_scene.0081.rakish.effect
		}
		trait = rakish
		add_trait = rakish
		rakish_brothel_night_effect = yes # Stress reduction is included in this effect.
		ai_chance = {
			base = 100
		}
	}
	#自戕
	option = {
		trigger = {
			has_character_flag = stress_threshold_option_flagellant
		}
		name = {
			trigger = { NOT = { has_trait = flagellant } }
			text = tentacleswarm_scene.0081.flagellant.gain
		}
		name = {
			trigger = { has_trait = flagellant }
			text = tentacleswarm_scene.0081.flagellant.effect
		}
		add_trait = flagellant
		trait = flagellant
		increase_wounds_effect = {REASON = whipping}
		if = {
			limit = {
				is_alive = yes
			}
			add_stress = medium_stress_impact_loss
		}
		ai_chance = {
			base = 50
			modifier = {
				add = 100
				has_trait = zealous
			}
		}

	}
	#忍着
	option = {
		name = tentacleswarm_scene.0081.endure
		add_stress = mental_break_opt_out_stress_gain
		ai_chance = {
			base = 30
			modifier = {
				add = 5
				has_trait = stubborn  
			}
		}
	}
	
	#清除flag
	after = {
		remove_character_flag = stress_threshold_option_corruption
		stress_threshold_event_aftereffects = yes # Perform stress threshold event clean-up and preparation for future stress threshold events.
	}
}

#古堡探险
#古堡起
tentacleswarm_scene.0091 = {
	type = character_event
	title = tentacleswarm_scene.0091.t
	desc = tentacleswarm_scene.0091.desc
	
	theme = tentacleswarm_scene_theme_1
	override_background = { event_background = corridor_night }
	left_portrait = {
		character = root
		animation = personality_cynical
	}
	
	immediate = {
	}
	option = { #主人公在这个故事背景里面的反应
		name = tentacleswarm_scene.0091.a
		trigger_event= {
			id = tentacleswarm_scene.0092
		}
	}
}
#古堡承
tentacleswarm_scene.0092 = {
	type = character_event
	title = tentacleswarm_scene.t	
	desc = {
		#如何被抓获的
		desc = tentacleswarm_scene.0092.desc
		#根据是否是奴隶，是否怀孕，选择被侵害时的文本
		first_valid = {
			triggered_desc = {
				trigger = {
					is_tentacle_slave = yes
					NOT = { has_trait = pregnant }
				}
				desc = tentacleswarm_scene.slave_not_pregnant
			}
			triggered_desc = {
				trigger = {
					is_tentacle_slave = yes
					has_trait = pregnant
				}
				desc = tentacleswarm_scene.slave_pregnant
			}
			triggered_desc = {
				trigger = {
					is_tentacle_slave = no
					NOT = { has_trait = pregnant }
				}
				desc = tentacleswarm_scene.not_slave_not_pregnant
			}
			triggered_desc = {
				trigger = {
					is_tentacle_slave = no
					has_trait = pregnant
				}
				desc = tentacleswarm_scene.not_slave_pregnant
			}
		} 
	}
	theme = tentacleswarm_scene_theme_2
	override_background = { event_background = corridor_night }
	left_portrait = {
		character = this
		animation = shock
	}
	#已经发生的事件，被触手主人侵袭了
	immediate = {
		tentacle_corrupt_effect = yes
	}
	#下面的选项决定主人公是否屈服于主人，不抵抗腐化
	#接受tentacle_corrupt_accept_effect将导致【转】部分的恶堕事件
	#拒绝tentacle_corrupt_reject_effect计算是否成功抵抗
	#如果抵抗失败了依然导致恶堕事件，否则只有提示横幅，然后跳过【转】部分。
	
	#接受选项
	option = {
		name = tentacleswarm_scene.accept_slave #奴隶接受文本
		trigger = {
			is_tentacle_slave = yes
		}
		tentacle_corrupt_accept_effect = yes
		ai_chance = {
			base = 100
			ai_accept_corrupt_modifier = yes
		}
	}
	option = {
		name = tentacleswarm_scene.accept #非奴隶接受文本
		trigger = {
			is_tentacle_slave = no
		}
		tentacle_corrupt_accept_effect = yes
		ai_chance = {
			base = 100
			ai_accept_corrupt_modifier = yes
		}
	}
	#拒绝选项
	option = {
		trigger = {  
			NOT = { has_perk = tentacle_corruption_22_perk } #如果瘴气成瘾了，这个选项不能选
		}
		show_as_unavailable = {
			is_tentacle_slave = no
			has_perk = tentacle_corruption_22_perk #如果是触手奴隶了，这个选项看不到
		}
		name = tentacleswarm_scene.reject
		tentacle_corrupt_reject_effect = yes
		ai_chance = {
			base = 100
			ai_reject_corrupt_modifier = yes
		}
	}
	#一天之后，结算【合】部分
	after = {
		trigger_event= {
			id = tentacleswarm_scene.0093
			days = 1
		}
	}
}
#古堡合
tentacleswarm_scene.0093 = {
	type = character_event
	title = tentacleswarm_scene.0093.t
	desc = { #尾声
		#根据是否是奴隶，选择尾声时的文本
		first_valid = {
			triggered_desc = {
				trigger = {
					OR = {
						is_tentacle_slave = yes
						has_character_flag = willing_to_be_corrupted
					}
				}
				desc = tentacleswarm_scene.0093.desc1
			}
			triggered_desc = {
				trigger = {
					always = yes
				}
				desc = tentacleswarm_scene.0093.desc2
			}
		} 
	}
	
	theme = tentacleswarm_scene_theme_4
	override_background = { event_background = corridor_night }
	left_portrait = {
		character = this
		animation = personality_coward #乖巧
	}
	option = {
		name = tentacleswarm_scene.0093.a #开心
		trigger = {  
			OR = {
				is_tentacle_slave = yes
				has_character_flag = willing_to_be_corrupted
			}
		}
	}
	option = {
		name = tentacleswarm_scene.0093.b #厌恶
		trigger = {  
			NOR = {
				is_tentacle_slave = yes
				has_character_flag = willing_to_be_corrupted
			}
		}
	}
	after = {
		#在这里可以清理一下各种flag什么的
	}
}
#遗世之曦
#遗世起
tentacleswarm_scene.0101 = {
	type = character_event
	title = tentacleswarm_scene.0101.t
	desc = tentacleswarm_scene.0101.desc
	
	theme = tentacleswarm_scene_theme_1
	override_background = { event_background = wilderness }
	left_portrait = {
		character = root
		animation = personality_coward
		#love
		#flirtation_left 
	}
	right_portrait = {
		character = scope:beautiful_peasant
		animation = happiness 
	}
	
	immediate = {
	}
	option = { #主人公在这个故事背景里面的反应
		name = tentacleswarm_scene.0101.a
		trigger_event= {
			id = tentacleswarm_scene.0102
		}
	}
}
#遗世承
tentacleswarm_scene.0102 = {
	type = character_event
	title = tentacleswarm_scene.t	
	desc = {
		#如何被抓获的
		desc = tentacleswarm_scene.0102.desc
		#根据是否是奴隶，是否怀孕，选择被侵害时的文本
		first_valid = {
			triggered_desc = {
				trigger = {
					is_tentacle_slave = yes
					NOT = { has_trait = pregnant }
				}
				desc = tentacleswarm_scene.slave_not_pregnant
			}
			triggered_desc = {
				trigger = {
					is_tentacle_slave = yes
					has_trait = pregnant
				}
				desc = tentacleswarm_scene.slave_pregnant
			}
			triggered_desc = {
				trigger = {
					is_tentacle_slave = no
					NOT = { has_trait = pregnant }
				}
				desc = tentacleswarm_scene.not_slave_not_pregnant
			}
			triggered_desc = {
				trigger = {
					is_tentacle_slave = no
					has_trait = pregnant
				}
				desc = tentacleswarm_scene.not_slave_pregnant
			}
		} 
	}
	theme = tentacleswarm_scene_theme_2
	override_background = { event_background = wilderness }
	left_portrait = {
		character = this
		animation = shock
	}
	right_portrait = {
		character = scope:beautiful_peasant
		animation = schadenfreude
		#personality_zealous
		#personality_greedy
	}
	#已经发生的事件，被触手主人侵袭了
	immediate = {
		tentacle_corrupt_effect = yes
	}
	#下面的选项决定主人公是否屈服于主人，不抵抗腐化
	#接受tentacle_corrupt_accept_effect将导致【转】部分的恶堕事件
	#拒绝tentacle_corrupt_reject_effect计算是否成功抵抗
	#如果抵抗失败了依然导致恶堕事件，否则只有提示横幅，然后跳过【转】部分。
	
	#接受选项
	option = {
		name = tentacleswarm_scene.accept_slave #奴隶接受文本
		trigger = {
			is_tentacle_slave = yes
		}
		tentacle_corrupt_accept_effect = yes
		ai_chance = {
			base = 100
			ai_accept_corrupt_modifier = yes
		}
	}
	option = {
		name = tentacleswarm_scene.accept #非奴隶接受文本
		trigger = {
			is_tentacle_slave = no
		}
		tentacle_corrupt_accept_effect = yes
		ai_chance = {
			base = 100
			ai_accept_corrupt_modifier = yes
		}
	}
	#拒绝选项
	option = {
		trigger = {  
			NOT = { has_perk = tentacle_corruption_22_perk } #如果瘴气成瘾了，这个选项不能选
		}
		show_as_unavailable = {
			is_tentacle_slave = no
			has_perk = tentacle_corruption_22_perk #如果是触手奴隶了，这个选项看不到
		}
		name = tentacleswarm_scene.reject
		tentacle_corrupt_reject_effect = yes
		ai_chance = {
			base = 100
			ai_reject_corrupt_modifier = yes
		}
	}
	#一天之后，结算【合】部分
	after = {
		trigger_event= {
			id = tentacleswarm_scene.0103
			days = 1
		}
	}
}
#遗世合
tentacleswarm_scene.0103 = {
	type = character_event
	title = tentacleswarm_scene.0103.t
	desc = { #尾声
		#根据是否是奴隶，选择尾声时的文本
		first_valid = {
			triggered_desc = {
				trigger = {
					OR = {
						is_tentacle_slave = yes
						has_character_flag = willing_to_be_corrupted
					}
				}
				desc = tentacleswarm_scene.0103.desc1
			}
			triggered_desc = {
				trigger = {
					always = yes
				}
				desc = tentacleswarm_scene.0103.desc2
			}
		} 
	}
	
	theme = tentacleswarm_scene_theme_4
	override_background = { event_background = wilderness }
	left_portrait = {
		character = this
		animation = personality_cynical
	}
	right_portrait = {
		character = scope:beautiful_peasant
		animation = personality_forgiving
		#ecstasy
		#personality_zealous
	}
	option = {
		name = tentacleswarm_scene.0103.a #开心
		trigger = {  
			OR = {
				is_tentacle_slave = yes
				has_character_flag = willing_to_be_corrupted
			}
		}
		scope:beautiful_peasant = {
			random_secret = {
				limit = { 
					secret_type = secret_tentacle_slave 
					NOT = { is_known_by = ROOT }
				}
				reveal_to = ROOT
			}
		}
	}
	option = {
		name = tentacleswarm_scene.0103.b #厌恶
		trigger = {  
			NOR = {
				is_tentacle_slave = yes
				has_character_flag = willing_to_be_corrupted
			}
		}
		scope:beautiful_peasant = {
			random_secret = {
				limit = { 
					secret_type = secret_tentacle_slave 
					NOT = { is_known_by = ROOT }
				}
				reveal_to = ROOT
			}
		}
	}
	after = {
		#回到狩猎事件
		trigger_event= {
			id = tentacleswarm_fake.0012
			days = 1
		}
	}
}