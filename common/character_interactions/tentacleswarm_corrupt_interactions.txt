#开始诱导恶堕密谋
tentacle_degenerate_start_scheme_interaction = {
	icon = icon_hostile
	common_interaction = yes
	interface_priority = 70
	category = interaction_category_hostile

	ignores_pending_interaction_block = yes

	send_name = START_SCHEME

	scheme = tentacle_degenerate
	ignores_pending_interaction_block = yes
	
	is_shown = {
		scope:actor = { is_tentacle_slave = yes }
		NOR = {
			scope:recipient = scope:actor
		}
	}

	is_valid = {
	}
	
	is_valid_showing_failures_only = {
		scope:actor = {
			can_start_scheme = {
				type = tentacle_degenerate
				target_character = scope:recipient
			}
		}
		scope:recipient = { NOT = { has_strong_hook = scope:actor } }
	}

	desc = {
		triggered_desc = {
			trigger = {
				scope:actor = {
					can_start_scheme = {
						type = tentacle_degenerate
						target_character = scope:recipient
					}
				}
			}
			desc = tentacle_degenerate_start_scheme_interaction_desc
		}
	}

	# Scheme Starter Packages
	options_heading = schemes.t.agent_packages
	send_options_exclusive = yes
	## Balanced agents.
	send_option = {
		flag = agent_focus_balance
		current_description = start_tentacle_degenerate_interaction.tt.agent_focus_balance
	}
	## Focused on Speed.
	send_option = {
		flag = agent_focus_speed
		current_description = start_tentacle_degenerate_interaction.tt.agent_focus_speed
	}
	## Focused on Secrecy.
	send_option = {
		flag = agent_focus_secrecy
		current_description = start_tentacle_degenerate_interaction.tt.agent_focus_secrecy
	}
	
	on_accept = {
		scope:actor = {
			stress_impact = {
				compassionate = major_stress_impact_gain
				honest = medium_stress_impact_gain
				just = medium_stress_impact_gain
			}
		}
		scope:actor = {
			send_interface_toast = {
				type = event_toast_effect_neutral
				title = tentacle_degenerate_start_scheme_interaction

				left_icon = scope:actor					
				right_icon = scope:recipient

				# Speed.
				if = {
					limit = { scope:agent_focus_speed ?= yes }
					begin_scheme_with_agents_effect = {
						SCHEME_TYPE = tentacle_degenerate
						TARGET_TYPE = target_character
						TARGET_SCOPE = scope:recipient
						# Speed.
						AGENT_1 = agent_infiltrator
						AGENT_2 = agent_socialite
						AGENT_3 = agent_tracker
						AGENT_4 = agent_planner
						# Secrecy.
						AGENT_5 = agent_lookout
					}
				}
				# Secrecy.
				else_if = {
					limit = { scope:agent_focus_secrecy ?= yes }
					begin_scheme_with_agents_effect = {
						SCHEME_TYPE = tentacle_degenerate
						TARGET_TYPE = target_character
						TARGET_SCOPE = scope:recipient
						# Speed.
						AGENT_1 = agent_infiltrator
						# Secrecy.
						AGENT_2 = agent_alibi
						AGENT_3 = agent_decoy
						AGENT_4 = agent_lookout
						AGENT_5 = agent_lookout
					}
				}
				# Balanced.
				else = {
					begin_scheme_with_agents_effect = {
						SCHEME_TYPE = tentacle_degenerate
						TARGET_TYPE = target_character
						TARGET_SCOPE = scope:recipient
						# Speed.
						AGENT_1 = agent_infiltrator
						AGENT_2 = agent_socialite
						AGENT_3 = agent_tracker
						# Secrecy.
						AGENT_4 = agent_decoy
						AGENT_5 = agent_lookout
					}
				}
			}
			# Plus any on_start modifiers we may need.
			if = {
				limit = { var:feast_events_ewan_0001_bonus_value ?= scope:recipient }
				# Hand over the modifier.
				random_scheme = {
					limit = {
						scheme_type = tentacle_degenerate
						scheme_target_character = scope:recipient
					}
					add_scheme_modifier = { type = feast_learnt_habits_modifier }
				}
				# Remove the variable now that we're done with it.
				remove_variable = feast_events_ewan_0001_bonus_value
			}
		}
	}
	
	
	auto_accept = yes
	
	ai_potential = {
		always = yes
	}
	ai_frequency = 24
	
	ai_targets = {
		ai_recipients = dynasty
		max = 2
	}
	ai_targets = {
		ai_recipients = courtiers
		ai_recipients = scripted_relations
		max = 5
	}
	ai_targets = {
		ai_recipients = liege
		ai_recipients = vassals
		ai_recipients = peer_vassals
		ai_recipients = neighboring_rulers
		max = 5
	}
	
	ai_targets = {
		ai_recipients = realm_characters
		max = 3
	}
	
	ai_target_quick_trigger = {
		adult = yes
		prison = no
	}
	ai_will_do = {
		base = 80
		#已经在执行诱导恶堕了
		modifier = {
			factor = 0.1
			scope:actor = {
				trigger_if = {
					limit = { has_perk = tentacle_corruption_62_perk }
					any_scheme = {
						count >= 3
						scheme_type = tentacle_degenerate
					}
				}
				trigger_else = {
					any_scheme = {
						scheme_type = tentacle_degenerate
					}
				}
			}
		}
		
		#性格
		modifier = {
			factor = 0.5
			scope:actor = {
				OR = {
					has_trait = just
					has_trait = honest
					has_trait = compassionate
				}
			}
		}
		#优先考虑诱导统治者恶堕
		modifier = {
			factor = 2
			scope:recipient = {
				is_landed = yes
			}
		}
		#以及统治者夫人
		modifier = {
			factor = 2
			scope:recipient = {
				any_spouse = {
					is_landed = yes
				}
			}
		}
		#已经有人在诱导她了
		modifier = {
			factor = 0.2
			scope:recipient = {
				is_ai = yes
				any_targeting_scheme = {
					scheme_type = tentacle_degenerate
				}
			}
		}
	}
}
#恶堕囚犯
tentacleswarm_imprisoner_interaction = {
	category = interaction_category_prison
	common_interaction = yes
	interface_priority = 100
	desc = tentacleswarm_imprisoner_interaction_desc
	cooldown_against_recipient = { months = 1 } #冷却时间
	
	ai_frequency = 3 #AI多久考虑一次
	
	ai_targets = {
		ai_recipients = prisoners
	}

	is_shown = {
		NOT = { scope:actor = scope:recipient }
		scope:actor = { 
			OR = {
				is_tentacle_slave = yes
				is_tentacleswarm_religion_character = yes
			}
		}
		scope:recipient = { is_imprisoned_by = scope:actor }
	}

	is_valid = {
		scope:recipient = { 
			is_tentaclable_female = yes
			NOT = { is_tentacle_slave_known_by = { CHARACTER = scope:actor } }
		}
	}
	
	is_highlighted = {
		scope:recipient = { 
			is_tentaclable_female = yes
			is_tentacle_slave = no 
		}
	}
	on_send = {
	}
	on_accept = {
		scope:actor = { save_scope_as = imprisoner }
		scope:recipient = { save_scope_as = recipient }
		scope:recipient = {
			trigger_event = {
				id = tentacleswarm_scene.0040 #被囚禁者恶堕
			}
			custom_tooltip = tentacleswarm_scene.imprisoner.tt
		}
	}
	
	ai_potential = {
		is_tentacle_slave = yes
	}
	
	auto_accept = yes
	
	ai_will_do = {
		base = 100
	}
}
#主动要求恶堕
ask_for_tentacle_degeneration_interaction = {
	category = interaction_category_friendly
	common_interaction = yes
	interface_priority = 100
	desc = ask_for_tentacle_degeneration_interaction_desc
	
	ai_maybe = yes
	ai_min_reply_days = 4
	ai_max_reply_days = 9
	can_send_despite_rejection = yes #即使会失败也能寄出要求
	popup_on_receive = yes
	greeting = positive
	notification_text = ASK_FOR_TENTACLE_DEGENERATION_INTERACTION_NOTIFICATION
	cooldown_against_recipient = { years = 1 } #冷却时间
	
	is_shown = {
		NOT = { scope:actor = scope:recipient }
		scope:actor = { 
			is_tentaclable_female = yes
			is_tentacle_slave = no
			num_of_relation_tentacle_mentor = 0 #没有引路人
		}
	}

	is_valid = {
		scope:recipient = { 
			is_tentacle_slave_known_by = { CHARACTER = scope:actor }
		}
	}
	
	is_highlighted = {
		scope:actor = { 
			is_tentacleswarm_religion_character = yes
		}
	}
	on_send = {
		scope:actor = {
			if = {
				limit = { 
					NOT = { has_character_flag = willing_to_be_corrupted } 
				}
				add_character_flag = willing_to_be_corrupted
			}
		}
	}
	on_accept = {
		scope:actor = {
			set_relation_tentacle_mentor = scope:recipient
			trigger_event = {
				id = tentacleswarm_scene.0050 #主动恶堕
			}
		}
	}
	on_decline = {
		scope:actor = { 
			add_prestige = -100
		}
	}
	ai_accept = {
		base = 100
	}
	ai_potential = {
		is_tentacleswarm_religion_character = yes
	}
	
	ai_frequency = 12
	
	ai_targets = {
		ai_recipients = guests
		ai_recipients = courtiers
		ai_recipients = scripted_relations
		ai_recipients = peer_vassals
		ai_recipients = liege
	}
	
	
	ai_target_quick_trigger = {
		adult = yes
	}
	ai_will_do = {
		base = 100
	}
}