#触手天灾mod战争

#开辟新巢穴
tentacleswarm_conquest = {
	group = conquest
	
	combine_into_one = yes #多个可选目标，也只显示为一个cb
	should_show_war_goal_subview = yes
	mutually_exclusive_titles = { always = yes } #只能选一个目标头衔

	allowed_for_character = {
		has_religion = religion:tentacleswarm_religion #触手信徒
	}

	allowed_against_character = {
		scope:defender = {
			NOT = { has_religion = religion:tentacleswarm_religion } #目标不是触手信徒
			is_independent_ruler = yes #独立
		}
		scope:attacker = { #不允许跳板进攻。(AI只会进攻相邻或者事件进攻远距离，不用考虑这一条)
			OR = {
				is_ai = yes
				scope:defender = {
					any_sub_realm_county = {
						development_level > 0
					}
				}
			}
		}
	}
	valid_to_start = {
	}
	target_titles = all #O(n+)
	target_title_tier = kingdom
	target_de_jure_regions_above = yes #针对法理土地宣战，不需要目标实际持有头衔
	ignore_effect = change_title_holder #头衔变更类的效果不会在文本中显示

	ai_can_target_all_titles = { #只有满足以下条件的AI会去考虑进攻任一目标。其余只攻击相邻
		is_at_war = no
		#max_military_strength > 15000
		piety > 5000
	}
	
	ai_score_mult = { #AI对目标的选择
		value = 200
		#优先攻击异教徒
		if = {
			limit = {
				scope:defender = { 
					NOT = { has_religion = religion:tentacleswarm_religion }
				}
			}
			add = 150
		}
		#喜欢高发展的土地
		if = {
			limit = {
				scope:defender = { 
					capital_province.county = { 
						development_level > 0
					}
				}
			}
			add = -100
		}
		if = {
			limit = {
				scope:defender = { 
					capital_province.county = { 
						development_level > 5
					}
				}
			}
			add = 100
		}
		if = {
			limit = {
				scope:defender = { 
					capital_province.county = { 
						development_level > 15
					}
				}
			}
			add = 100
		}
		#不喜欢攻击奴隶
		if = {
			limit = {
				scope:defender = { 
					is_tentacle_slave = yes
				}
			}
			add = -100
		}
	}

	should_invalidate = {
		OR = {
			NOT = { #目标境内的目标头衔中没有土地了
				any_in_list = {
					list = target_titles
					any_in_de_jure_hierarchy = {
						tier = tier_county
						holder = {
							target_is_same_character_or_above = scope:defender
						}
					}
				}
			}
			scope:attacker = { #进攻方改信了
				NOT = { has_religion = religion:tentacleswarm_religion }
			}
			scope:defender = { #防守方改信了
				has_religion = religion:tentacleswarm_religion 
			}
			scope:defender = { #不独立了
				is_independent_ruler = no 
			}
		}
	}

	on_invalidated_desc = msg_tentacleswarm_war_invalidated_message
	
	on_invalidated = {
	}

	cost = {
		piety = {
			value = 50 #基础消耗虔诚
			if = { # 进攻宗教领袖消耗虔诚
				limit = {
					exists = scope:attacker.faith.religious_head
					scope:attacker.faith.religious_head = scope:defender
				}
				if = {
					limit = {
						scope:attacker.faith = {
							has_doctrine = doctrine_spiritual_head
						}
					}
					add = {
						value = massive_piety_value
						desc = CB_ATTACKER_HOF
					}
				}
				else = {
					add = {
						value = medium_piety_value
						desc = CB_ATTACKER_HOF
					}
				}
			}
			if = { #攻击同宗教神权统治者消耗虔诚
				limit = {
					scope:attacker.faith = scope:defender.faith
					scope:defender = {
						has_government = theocracy_government
					}
				}
				add = {
					value = medium_piety_value
					desc = CB_ATTACKER_THEOCRACY
				}
			}
			if = { #攻击触手奴隶统治者消耗虔诚
				limit = {
					scope:defender = {
						is_tentacle_slave = yes
					}
				}
				add = {
					value = 200
					desc = CB_TENTACLE_PARTNER
				}
			}
			if = { #部落制虔诚消耗减半
				limit = {
					scope:attacker = { has_government = tribal_government }
				}
				multiply = {
					value = 0.5
					desc = CB_TRIBAL_COST
				}
			}

			if = { #革新修正
				limit = {
					scope:attacker = {
						culture = {
							has_innovation = innovation_reconquista
						}
					}
				}
				multiply = {
					value = 0.9
					desc = CB_RECONQUISTA_COST
				}
			}
			
			if = { #技能修正
				limit = {
					scope:attacker = {
						has_perk = bellum_justum_perk
					}
				}
				multiply = {
					add = bellum_justum_discount_percentage
					divide = 100
					desc = CB_ATTACKER_BELLUM_JUSTUM
				}
			}

			if = { #传承修正
				limit = {
					scope:attacker = {
						has_dynasty = yes
						dynasty = {
							has_dynasty_perk = warfare_legacy_2
						}
					}
				}
				multiply = {
					value = warfare_legacy_2_discount
					desc = CB_ATTACKER_DYNASTY_WARFARE
				}
			}

			if = { #契约修正
				limit = {
					scope:attacker = {
						is_independent_ruler = no
						vassal_contract_has_flag = vassal_contract_war_override
						liege = scope:defender.liege
					}
				}
				multiply = {
					value = war_declaration_rights_allowed_cost_reduction
					desc = "CB_ATTACKER_VASSAL_CONTRACT"
				}
			}

			if = { #规则修正
				limit = {
					has_game_rule = no_cost_casus_belli_costs
				}
				multiply = {
					value = 0
					desc = CB_GAME_RULE_NO_COST
				}
			}
		}
	}

	on_declaration = { #宣战时效果
		on_declared_war = yes
	}

	on_victory_desc = { #胜利效果描述
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:attacker = { is_local_player = yes }
				}
				desc = tentacleswarm_cb_victory_desc_attacker
			}
			desc = tentacleswarm_cb_victory_desc
		}
	}

	on_victory = { #胜利效果
		scope:attacker = {
			if = {
				limit = { is_independent_ruler = yes } #独立领主的话，打下目标地块，然后把旧有土地之中的摧毁地块抛弃掉
				#获得目标头衔
				create_title_and_vassal_change = {
					type = conquest
					save_scope_as = change
					add_claim_on_loss = yes
				}
				every_in_list = {
					list = target_titles
					custom_tooltip = CONQUEST_CB_TITLE
					every_in_de_jure_hierarchy = { #搜索目标法理之内所有由防御者控制的上级头衔
						limit = {
							tier >= tier_county
							exists = holder
							holder = {
								OR = {
									this = scope:defender
									target_is_liege_or_above = scope:defender
								}
							}
						}
						add_to_temporary_list = titles_taken
					}
				}
				every_in_list = {
					list = titles_taken
					change_title_holder = {
						holder = scope:attacker
						change = scope:change
						take_baronies = yes
					}
				}
				resolve_title_and_vassal_change = scope:change

				#处理老地块
				scope:attacker = {
					#废弃的土地，随便找个人拿
					random_held_title = {
						limit = { 
							tier = tier_county 
							NOT = { is_in_list = titles_taken }#不是刚拿的头衔
							has_county_modifier = tentacleswarm_destroy
						}
						save_scope_as = target
						random_living_character = {
							limit = {
								is_pool_character = yes
								is_tentacle_slave = no
								not = { has_religion = religion:tentacleswarm_religion }
								has_culture_group = scope:target.culture_group
							}
							save_scope_as = lucky
						}
						if = {
							limit = { NOT = { exists = scope:lucky }  }
							random_living_character = {
								limit = {
									is_pool_character = yes
									is_tentacle_slave = no
									not = { has_religion = religion:tentacleswarm_religion }
								}
								save_scope_as = lucky
							}
						}
					}
					every_held_title = { 
						limit = { 
							tier = tier_county 
							NOT = { is_in_list = titles_taken }#不是刚拿的头衔
							has_county_modifier = tentacleswarm_destroy
						}
						save_scope_as = target
						create_title_and_vassal_change = {
							type = usurped
							save_scope_as = change
							add_claim_on_loss = yes
						}
						scope:target = {#拿头衔
							change_title_holder_include_vassals = {
								holder = scope:lucky
								change = scope:change
							}
						}
						scope:lucky = {#独立
							becomes_independent = { change = scope:change }
						}
						resolve_title_and_vassal_change = scope:change
					}
				}
			}
			else = { #附庸领主的话，参考蜂巢mod的新巢战争，把旧有土地都还给原领主			
				#保存原领主
				liege = { save_scope_as = old_liege}
				#获得目标头衔
				create_title_and_vassal_change = {
					type = conquest
					save_scope_as = change
					add_claim_on_loss = yes
				}
				every_in_list = {
					list = target_titles
					custom_tooltip = CONQUEST_CB_TITLE
					every_in_de_jure_hierarchy = { #搜索目标法理之内所有由防御者控制的土地
						limit = {
							tier >= tier_county
							exists = holder
							holder = {
								OR = {
									this = scope:defender
									target_is_liege_or_above = scope:defender
								}
							}
						}
						add_to_temporary_list = titles_taken
					}
				}
				every_in_list = {
					list = titles_taken
					change_title_holder = {
						holder = scope:attacker
						change = scope:change
						take_baronies = yes
					}
				}
				resolve_title_and_vassal_change = scope:change			
				
				#保存一下目标头衔
				random_in_list = {
					list = target_titles
					limit = { tier = tier_kingdom }
					save_scope_as = target_kingdom
				}		
				#处理老地块
				scope:attacker = {
					if = {
						create_title_and_vassal_change = {
							type = swear_fealty
							save_scope_as = change
							add_claim_on_loss = yes
						}
						every_held_title = { #所有的原土地给原领主
							limit = {
								tier = tier_county
								is_head_of_faith =  no 
								NOT =  { target_is_de_jure_liege_or_above = scope:target_kingdom }
							}
							change_title_holder = {
								holder = scope:old_liege
								change = scope:change
							}
						}
						every_vassal = { #所有的原封臣给原领主
							limit = {
								capital_province.county = {
									NOT =  { target_is_de_jure_liege_or_above = scope:target_kingdom }
								}
							}
							change_liege = {
								liege = scope:old_liege
								change = scope:change
							}
						}
						resolve_title_and_vassal_change = scope:change
					}
				}
				#独立
				scope:attacker = {
					create_title_and_vassal_change = {
						type = independency
						save_scope_as = change
					}
					change_liege_or_become_independent = {
						CHANGE = scope:change
						VASSAL = this
					}
					resolve_title_and_vassal_change = scope:change
				}
			}
		}

		# 从征服中获得荣耀
		every_in_list = {
			list = target_titles
			scope:attacker = {
				add_prestige_experience = medium_prestige_value
			}
		}

		#进攻方盟友获得
		add_from_contribution_attackers = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		#防御方盟友获得
		add_from_contribution_defenders = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		#和约
		add_truce_attacker_victory_effect = yes
	}

	#白和
	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = county_conquest_cb_white_peace_desc_defender
			}
			desc = county_conquest_cb_white_peace_desc
		}
	}

	on_white_peace = {
		# Prestige loss for the attacker
		scope:attacker = {
			add_prestige = {
				value = minor_prestige_value
				multiply = -1.0
			}
		}

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		add_truce_white_peace_effect = yes
	}

	#战败
	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = tentacleswarm_cb_defeat_desc_defender
			}
			triggered_desc = {
				trigger = {
					scope:attacker = {
						is_local_player = yes
						has_targeting_faction = yes
					}
				}
				desc = tentacleswarm_cb_defeat_desc_attacker
			}
			desc = tentacleswarm_cb_defeat_desc
		}
	}

	on_defeat = {

		# 战败时进攻方被处决
		#scope:attacker = {
		#	death = { killer = scope:defender death_reason = death_execution }
		#}

		# Prestige for Defender
		scope:defender = {
			add_prestige = major_prestige_value
		}

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = medium_prestige_value
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}
		scope:attacker = {
			save_temporary_scope_as = loser
		}

		on_lost_aggression_war_discontent_loss = yes
	}

	transfer_behavior = transfer #目标变更时，可以选择是否继续战争

	on_primary_attacker_death = invalidate #进攻方死亡时，战争无效
	on_primary_defender_death = inherit #防御方死亡时，战争继续

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = "TENTACLESWARM_WAR_NAME"
	war_name_base = "TENTACLESWARM_WAR_NAME_BASE"
	cb_name = "TENTACLESWARM_CB_NAME"

	interface_priority = 90

	use_de_jure_wargoal_only = yes

	attacker_wargoal_percentage = 1.0
	
	defender_faith_can_join = yes
	gui_defender_faith_might_join = yes

	min_ai_score = 100
}