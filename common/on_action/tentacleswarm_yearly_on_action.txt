#全局年度触发
yearly_global_pulse = {
	on_actions = { 
		tentacleswarm_yearly_global_pulse
	}
}
tentacleswarm_yearly_global_pulse = {
	effect = {
		#切分领主对象，避免O(n^2)的运算
		clear_global_variable_list = tentacleswarm_slave_ruler #奴隶领主
		clear_global_variable_list = tentacleswarm_main_slave_ruler #公爵以上奴隶领主
		clear_global_variable_list = tentacleswarm_target_ruler #目标领主
		clear_global_variable_list = tentacleswarm_main_target_ruler #公爵以上目标领主
		clear_global_variable_list = tentacleswarm_protected_ruler #被保护的领主
		
		every_ruler = {
			limit = { highest_held_title_tier >= tier_county } #只考虑伯爵以上
			add_to_global_variable_list = { name = tentacleswarm_main_target_ruler target = this }
			if = {#奴隶领主
				limit = { has_religion = religion:tentacleswarm_religion }
				add_to_global_variable_list = { name = tentacleswarm_slave_ruler target = this }	
				if = {
					limit = {
						highest_held_title_tier >= tier_duchy 
						is_independent_ruler = yes
					}
					add_to_global_variable_list = { name = tentacleswarm_main_slave_ruler target = this }
				}
			}
			else_if = {
				limit = { 
					any_held_title = {
						tier = tier_county
						development_level > 0
					}
				}
				add_to_global_variable_list = { name = tentacleswarm_target_ruler target = this }	
				if = {
					limit = {
						highest_held_title_tier >= tier_duchy 
						is_independent_ruler = yes
					}
					add_to_global_variable_list = { name = tentacleswarm_main_target_ruler target = this }
				}
			}
			else = {
				add_to_global_variable_list = { name = tentacleswarm_protected_ruler target = this }	
			}
		}
		#成就检测
		tentacleswarm_yearly_check = yes
	}
}
#每个人年度触发
random_yearly_everyone_pulse = {
	on_actions = { 
		tentacleswarm_bliever_yearly
		tentacle_slave_yearly
	}
}
tentacleswarm_bliever_yearly = { #触手信徒年度行动触发
	trigger = {
		has_religion = religion:tentacleswarm_religion
		is_ai = yes
	}
	effect = {
		if = { #没有成为奴隶的成年女性成为奴隶
			limit = {
				is_female = yes
				is_adult = yes
				not = { has_trait = tentacle_slave }
			}
			trigger_event = {
				id = tentacleswarm_slave.0031 #虔诚赐福
			}
		}
	}
}
tentacle_slave_yearly = {#触手奴隶年度行动触发
	trigger = {
		is_tentacle_slave = yes
		is_ai = yes
	}
	effect = {
		if = { #自己是潜藏的统治者的话，查看首都巨兽储备决定是否起事
			limit = { 
				is_landed = yes
				highest_held_title_tier >=tier_county
				is_hidden_tentacle_slave = yes
			}
			if = {
				limit = {
					capital_county = {
						var:tentacleswarm_corruption_warbeast = { compare_value >= root.faith.var:tentacleswarm_cap }
					}
				}
				#改信，释放费洛蒙
				convert_to_tentacleswarm_religion = yes
				tentacleswarm_4VA = yes 
			}
		}
		else_if = {
			limit = {
				#已经暴露的统治者，皈依正统信仰
				is_ruler = yes
				has_trait = tentacle_slave
			}
			convert_to_tentacleswarm_religion = yes
		}
		else_if = {
			limit = {
				#如果上头有人，皈依正统信仰,揭露身份
				any_liege_or_above = { has_religion = religion:tentacleswarm_religion }
			}
			convert_to_tentacleswarm_religion = yes
		}
		else = {
			#如果上头没人，跟风当地信仰
			if = {
				limit = {
					has_religion = religion:tentacleswarm_religion 
					exists = location
					exists = location.faith
				}
				#set_character_faith = location.faith
			}
			#根据新信仰选择是否要将身份藏起来
			if = {
				limit = {
					is_ai = yes
					has_trait = tentacle_slave
					NOT = { has_character_flag = exposed_tentacle_slave } #被揭发的无法藏身
				} 
				#remove_trait = tentacle_slave
				#become_tentacle_slave = yes #刷新奴隶身份
			}
		}
		if = {
			limit = { #配偶有地，尝试密谋夺取
				any_spouse = {
					is_landed = yes
					highest_held_title_tier >= tier_county
					capital_county = {
						var:tentacleswarm_corruption_warbeast = { compare_value >= root.faith.var:tentacleswarm_cap }
					}
				}
				Not = { 
					any_scheme = {
						is_hostile = yes
					}
				}
			}
			random_spouse = {
				limit = { 
					is_landed = yes
					highest_held_title_tier >= tier_county
				}
				save_scope_as = target
			}
			start_scheme = {
				type = tentacle_slave_claim_throne
				target = scope:target
			}
		}
		if = {
			limit = { #父母有地，尝试密谋夺取
				any_parent = {
					is_landed = yes 
					highest_held_title_tier >= tier_county
					capital_county = {
						var:tentacleswarm_corruption_warbeast = { compare_value >= root.faith.var:tentacleswarm_cap }
					}
					OR = {
						is_male = yes #只针对父亲，或者无生育能力的母亲
						fertility <= 0
					}
				}
				Not = { 
					any_scheme = {
						is_hostile = yes
					}
				}
			}
			random_parent = {
				limit = { 
					is_landed = yes
					highest_held_title_tier >= tier_county
				}
				save_scope_as = target
			}
			start_scheme = {
				type = tentacle_slave_claim_throne
				target = scope:target
			}
		}
	}
}
#每年触发
yearly_playable_pulse = {
	on_actions = {
		delay = { days = 10}
		tentacleswarm_yearly_modifier_check #检查灭杀令和播种令
		delay = { days = 10 }
		tentacleswarm_yearly_playable_pulse #领地腐化度结算
	}
}
tentacleswarm_yearly_playable_pulse = {
	effect = {
		#计算统治者的宫廷会带来多大的腐化度
		set_variable =  { name = tentacleswarm_corruption_add value = 0} 	#基础
		if = {
			limit = { is_tentacle_slave = yes } 
			change_variable =  { name = tentacleswarm_corruption_add add = 10 } #如果统治者是奴隶
		}	
		if = {
			limit = { has_religion = religion:tentacleswarm_religion } 
			change_variable =  { name = tentacleswarm_corruption_add add = 0 } #如果统治者信奉触手宗教
		}
		every_spouse = {
			limit = { is_tentacle_slave = yes  }
			PREV = { change_variable =  { name = tentacleswarm_corruption_add add = 5 } }#如果配偶是触手奴隶，配偶一般也是宾客
		}
		every_spouse = {
			limit = { has_religion = religion:tentacleswarm_religion  }
			PREV = { change_variable =  { name = tentacleswarm_corruption_add add = 0 } }#如果配偶信奉触手宗教
		}
		every_courtier_or_guest = {
			limit = { is_tentacle_slave = yes  }
			PREV = { change_variable =  { name = tentacleswarm_corruption_add add = 1 } }#如果宾客是触手奴隶
		}
		every_courtier_or_guest = {
			limit = { has_religion = religion:tentacleswarm_religion  }
			PREV = { change_variable =  { name = tentacleswarm_corruption_add add = 0  } }#如果宾客信奉触手宗教
		}
		if = {
			limit = { #摧毁失去所有栖息地的触手领主的国家
				has_religion = religion:tentacleswarm_religion
				any_held_title = {
					tier = tier_county #持有伯爵领。像骑士团这样的领主，不持有伯爵领，不会被摧毁。
				}
				NOT = {
					any_held_title = { #所有伯爵领都已经被摧毁
						tier = tier_county
						NOT = { has_county_modifier = tentacleswarm_destroy }
					}
				}
			}
			trigger_event = {
				id = tentacleswarm_destroy.0011
			}
		}
		else_if = { #如果依然持有土地的话
			limit = { 
				is_alive = yes
				is_landed = yes 
			}
			set_variable =  { name = tentacleswarm_warbeast_gain value = 0}#用于后面计算能获得几队巨兽
		
			#为每个伯爵领结算腐化度
			every_held_title = {
				limit = { tier = tier_county }
				save_scope_as = county
				if = { #已经被废弃的土地，不结算滋生
					limit = { 
						has_county_modifier = tentacleswarm_destroy
					}
				}
				#否则，进行滋生
				else = {
					#计算自然增长率
					set_variable =  { name = tentacleswarm_corruption_growth value = 75 } #基础衰减	
					#本地信仰修正
					if = {
						limit = { 
							faith = { has_doctrine_parameter = doctrine_tentacleswarm_evil }
						}
						change_variable =  { name = tentacleswarm_corruption_growth add = -30 } #本地敌视
					}
					else_if = {
						limit = { 
							religion = religion:tentacleswarm_religion 
						}
						change_variable =  { name = tentacleswarm_corruption_growth add = 30 } #本地信奉触手宗教
					}
					else_if = {
						limit = { 
							faith = { has_doctrine_parameter = doctrine_tentacleswarm_crime }
						}
						change_variable =  { name = tentacleswarm_corruption_growth add = -20 } #本地厌恶
					}
					else_if = {
						limit = { 
							faith = { has_doctrine_parameter = doctrine_tentacleswarm_shunned }
						}
						change_variable =  { name = tentacleswarm_corruption_growth add = -10 } #本地忌讳
					}
					if = {
						limit = { 
							county_controller = { has_character_modifier = tentacleswarm_anti }
						}
						change_variable =  { name = tentacleswarm_corruption_growth add = -20 } #绞杀令
					}
					if = {
						limit = { 
							county_controller = { has_character_modifier = tentacleswarm_spread }
						}
						change_variable =  { name = tentacleswarm_corruption_growth add = 20 } #散布令
					}
					change_variable =  { #发展度
						name = tentacleswarm_corruption_growth 
						add = {
							value = development_level 
							multiply = 1.5
						}
					}
					if = {
						limit = { var:tentacleswarm_corruption_growth = { compare_value > 100 } }
						set_variable =  { name = tentacleswarm_corruption_growth value = 100 }
					}	
					
					#计算腐化度自然增长
					change_variable =  { name = tentacleswarm_corruption multiply = var:tentacleswarm_corruption_growth }
					change_variable =  { name = tentacleswarm_corruption multiply = 0.01 }#百分数转小数
					
					#领主宫廷带来的增长
					change_variable =  { name = tentacleswarm_corruption add = holder.var:tentacleswarm_corruption_add }
				
					#计算地形带来的影响
					change_variable =  { name = tentacleswarm_corruption add = var:tentacleswarm_corruption_nature }
					
					#腐化上限
					if = {
						limit = { var:tentacleswarm_corruption = { compare_value > 300 } }
						set_variable =  { name = tentacleswarm_corruption value = 300 }
					}
					
					#计算迁出额度
					set_variable =  { name = tentacleswarm_corruption_emigrant value = 10 }
					change_variable =  { name = tentacleswarm_corruption_emigrant multiply = 0.01 }
					change_variable =  { name = tentacleswarm_corruption_emigrant multiply = var:tentacleswarm_corruption }
					every_title_to_title_neighboring_and_across_water_county = { #污染周围
						limit = {
							NOT = { has_county_modifier = tentacleswarm_destroy }
							var:tentacleswarm_corruption = { compare_value < scope:county.var:tentacleswarm_corruption } 
						}
						change_variable =  { name = tentacleswarm_corruption add = scope:county.var:tentacleswarm_corruption_emigrant }
						tentacleswarm_corruption_county_check = yes
					}
					
					
					#五档：10,20,35,60,100
					tentacleswarm_corruption_county_check = yes #根据腐化程度结算效果：改颜色，改buff,
					
					#破坏发展度
					if = {
						limit = { #零档，无腐化
							var:tentacleswarm_corruption = { compare_value < 10 }
						}
						change_variable =  { name = tentacleswarm_corruption_destroy add = 0 } #获得省份破坏进度
					}
					else_if = { #一档
						limit = {
							var:tentacleswarm_corruption = { compare_value < 20 }
						}
						change_variable =  { name = tentacleswarm_corruption_destroy add = 1 }
					}
					else_if = { #二档
						limit = {
							var:tentacleswarm_corruption = { compare_value < 35 }
						}
						change_variable =  { name = tentacleswarm_corruption_destroy add = 4 }
					}
					else_if = { #三档
						limit = {
							var:tentacleswarm_corruption = { compare_value < 60 }
						}
						change_variable =  { name = tentacleswarm_corruption_destroy add = 12 }
					}
					else_if = { #四档
						limit = {
							var:tentacleswarm_corruption = { compare_value < 100 }
						}
						change_variable =  { name = tentacleswarm_corruption_destroy add = 36 }
					}
					else = { #五档
						change_variable =  { name = tentacleswarm_corruption_destroy add = 100 }
					}
					
					if = {
						limit = { #破坏点数满100时候，掉1点发展度，生一队巨兽
							var:tentacleswarm_corruption_destroy = { compare_value >= 100 }
						}
						change_variable =  { name = tentacleswarm_corruption_destroy add = -100 }
						if = {
							limit = { development_level > 0 } 
							holder = {
								save_scope_as = holder
								send_interface_message = {
									type = event_steward_task_bad
									title = tentacleswarm_corruption_destroy.notification
									desc = tentacleswarm_corruption_destroy.desc
									
									left_icon = scope:county
									right_icon = scope:holder
									goto = scope:county
									#tooltip = tentacleswarm_corruption_destroy.tooltip

									scope:county = {
										change_development_level = -1
									}
								}
							}
						}
						#如果发展度已经为零了，省份被破坏殆尽
						else = {
							tentacleswarm_corruption_county_destroy_effect = yes #省份摧毁结算
							holder = {
								save_scope_as = holder
								send_interface_message = {
									type = event_steward_task_bad
									title = tentacleswarm_corruption_destroy1.notification
									desc = tentacleswarm_corruption_destroy1.desc
									
									left_icon = scope:county
									right_icon = scope:holder
									goto = scope:county
									show_as_tooltip = {
										scope:county = {
											add_county_modifier = tentacleswarm_destroy
										}
									}
								}
							}
						}
						
						if = { #如果领主是本宗教的，在破坏时直接获得一队巨兽
							limit = {
								holder = { has_religion = religion:tentacleswarm_religion }
							}
							holder = { #战争巨兽
								save_scope_as = holder
								change_variable = { name = tentacleswarm_warbeast_gain add = 1 }
								send_interface_message = {
									type = event_marshal_task_good
									title = tentacleswarm_corruption_warbeast.notification
									desc = tentacleswarm_corruption_warbeast.desc
									
									left_icon = scope:county
									right_icon = scope:holder
									goto = scope:county
									#还能从破坏中获得钱和虔诚
									add_gold = 50
									add_piety = 50
								}
							}
						}
						else = { #否则的话，巨兽在破坏完之后，沉睡了
							change_variable =  { name = tentacleswarm_corruption_warbeast add = 100 }
						}
					}
					if = {
						limit = { #本宗教领主可以唤醒沉睡的巨兽
							var:tentacleswarm_corruption_warbeast = { compare_value >= 100 }
							holder = {has_religion = religion:tentacleswarm_religion }
						}
						change_variable =  { name = tentacleswarm_corruption_warbeast add = -100 }
						holder = { #战争巨兽
							save_scope_as = holder
							change_variable = { name = tentacleswarm_warbeast_gain add = 1 }
							send_interface_message = {
								type = event_marshal_task_good
								title = tentacleswarm_corruption_warbeast1.notification
								desc = tentacleswarm_corruption_warbeast1.desc
								
								left_icon = scope:county
								right_icon = scope:holder
								goto = scope:county
								#还能从破坏中获得钱和虔诚
								add_gold = 50
								add_piety = 50
							}
						}
					}
				}
			}
			if = { #按照上面统计的数量生成战争巨兽
				limit = { 
					var:tentacleswarm_warbeast_gain = { compare_value >= 1 } 
				}
				spawn_army = {
					levies = {
						value = var:tentacleswarm_warbeast_gain
						multiply = 100
					}
					men_at_arms = {
						type = tentacleswarm_warbeast
						stacks = var:tentacleswarm_warbeast_gain #1组，一组十只
					}
					location = root.capital_province
					name = tentacleswarm_warbeast_event_troops
				}
			}
			#对于玩家来说，如果没有发展度大于3的省份，予以预警
			if = {
				limit = {
					is_ai = no
					has_religion = religion:tentacleswarm_religion
					NOT = { has_character_flag = tentacleswarm_destroy_alert }
					NOT = {
						any_held_title = {
							tier = tier_county
							development_level > 3
						}
					}
				}
				trigger_event = {
					id = tentacleswarm_destroy.0001
					days = 10
				}
			}
		}
		#成就相关
		tentacleswarm_check = yes
	}
}
#检查播种令和灭杀令
tentacleswarm_yearly_modifier_check = {
	effect = {
		if = {
			limit = { has_religion = religion:tentacleswarm_religion }
			if = { #信徒开启播种令
				limit = { 
					NOT = { has_character_modifier = tentacleswarm_spread }
					is_ai = yes #玩家自己点决议
					is_tentacle_slave = yes #非奴隶没有兴趣
				}
				add_character_modifier = tentacleswarm_spread
			}
		}
		else = {
			if = { #非信徒播种令无效化
				limit = { has_character_modifier = tentacleswarm_spread}
				remove_character_modifier = tentacleswarm_spread
			}
			
		}
		if = {
			limit = { 
				faith = {has_doctrine = doctrine_tentacleswarm_evil}
			}
			#敌对者开启灭杀令
			#通过决议
		}
		else = {
			if = { #非敌对者灭杀令无效化
				limit = { has_character_modifier = tentacleswarm_anti}
				remove_character_modifier = tentacleswarm_anti
			}
		}
	}
}
#每年随机触发
random_yearly_playable_pulse = {
	#自带的条件，诸如有地未被囚禁等等
	#trigger = { basic_is_valid_for_yearly_events_trigger = yes }
	on_actions = {
		tentacleswarm_random_yearly_playable_pulse	
		delay = { days = 10 }
		tentacleswarm_cancel_holy_order_lease_pulse #驱逐异教骑士团
	}
}
tentacleswarm_random_yearly_playable_pulse = {
	trigger = { 
		basic_is_valid_for_yearly_events_trigger = yes 
	}
	effect = {
		#远征。通常的触手征服只会打相邻的目标，我们现在让AI进行远征
		if = {
			limit = {
				has_religion = religion:tentacleswarm_religion
				is_ai = yes
				is_at_war = no
				OR = {
					is_independent_ruler = yes
					capital_county = {  #附庸只在首都发展度不足的情况下发动战争。
						development_level <= 8
					}
				}
				max_military_strength > 2000 #有一定兵力积蓄
			}
			save_scope_as = actor
			#搜索最大发展度的土地
			scope:actor = {
				set_variable =  { name = max_held_development value = 1 }
				every_held_title = {
					limit = { 
						tier = tier_county
					}
					if = {
						limit = { 
							development_level > scope:actor.var:max_held_development
						}
						scope:actor = { set_variable =  { name = max_held_development value = prev.development_level }}
					}
				}
				change_variable = { name = max_held_development multiply = 2 } #目标地要是原来的两倍以上发展度
				
				if = {	
					limit = { is_independent_ruler = yes }
					set_variable =  { name = max_held_development value = 1 } #独立领主的话，就不在意那么多
				}
			}
			#确定战争对象
			random_in_global_list = {
				variable = tentacleswarm_main_target_ruler
				limit = {
					highest_held_title_tier >= tier_duchy #不啃独立小伯爵
					is_landed = yes #有地
					NOT = { has_religion = religion:tentacleswarm_religion } #异教
					capital_county = {  #首都有较高发展度
						development_level >= scope:actor.var:max_held_development
					}
					ROOT = { #需要符合宣战条件
						is_character_interaction_valid = {
						   recipient = PREV
						   interaction = declare_war_interaction
						}
					}
					is_at_war = yes #优先打处于战争中的目标
				}
				save_scope_as = target_character
				save_scope_as = recipient
			}
			if = {
				limit = { 
					NOT = { exists = scope:target_character }
				}
				random_in_global_list = { #否则的话，和平的目标的也打
					variable = tentacleswarm_main_target_ruler
					limit = {
						highest_held_title_tier >= tier_duchy #不啃独立小伯爵
						is_landed = yes #有地
						NOT = { has_religion = religion:tentacleswarm_religion } #异教
						capital_county = {  #首都有较高发展度
							development_level >= scope:actor.var:max_held_development
						}
						ROOT = { #需要符合宣战条件
							is_character_interaction_valid = {
							   recipient = PREV
							   interaction = declare_war_interaction
							}
						}
					}
					save_scope_as = target_character
					save_scope_as = recipient
				}
			}
			#确定目标，发动战争
			if = {
				limit = { 
					exists = scope:target_character
				}
				scope:target_character = {
					random_realm_county = {
						limit = { 
							development_level >= scope:actor.var:max_held_development
						}
						save_scope_as = target
					}
					if = {
						limit = {
							war_declarer_needs_hook_on_liege = no #不需要领主同意就能发动战争
						}
						scope:actor = {
							start_war = { 
								casus_belli = tentacleswarm_conquest 
								target = scope:target_character
								target_title = scope:target.kingdom
							}
						}
					}
				}
			}
		}
	}
}
tentacleswarm_cancel_holy_order_lease_pulse = { #驱逐敌对骑士团
	trigger = {
		is_landed = yes
	}
	effect = {
		every_held_title = {
			limit = { 
				tier = tier_county
			}
			every_county_province = {
				limit = {
					exists = barony
				}
				barony = { #搜查每个直辖地内男爵领
					if = {
						limit = { #被租赁
							is_leased_out = yes
							has_revokable_lease = yes
						}
						lessee_title = { save_scope_as = lessee_title }
						if = {
							limit = { #敌对信仰租赁
								root.faith ={
									faith_hostility_level = { target = scope:lessee_title.holder.faith value > 1 }
								}
							}
							revoke_lease = yes #撤销租赁
						}
					}
				}
			}
		}
	}
}