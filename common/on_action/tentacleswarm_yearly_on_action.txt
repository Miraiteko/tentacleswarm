#全局年度触发
yearly_global_pulse = {
	on_actions = { 
		tentacleswarm_yearly_global_pulse
	}
}
tentacleswarm_yearly_global_pulse = { 
	effect = { 
		#切分领主对象，避免O(n^2)的运算
		clear_global_variable_list = tentacleswarm_slave_ruler #奴隶领主
		clear_global_variable_list = tentacleswarm_main_slave_ruler #公爵以上奴隶领主
		clear_global_variable_list = tentacleswarm_target_ruler #目标领主
		clear_global_variable_list = tentacleswarm_main_target_ruler #公爵以上目标领主
		clear_global_variable_list = tentacleswarm_protected_ruler #被保护的领主
		
		every_ruler = {
			limit = { highest_held_title_tier >= tier_county } #只考虑伯爵以上
			add_to_global_variable_list = { name = tentacleswarm_main_target_ruler target = this }
			if = {#奴隶领主
				limit = { has_religion = religion:tentacleswarm_religion }
				add_to_global_variable_list = { name = tentacleswarm_slave_ruler target = this }	
				if = {
					limit = {
						highest_held_title_tier >= tier_duchy 
						is_independent_ruler = yes
					}
					add_to_global_variable_list = { name = tentacleswarm_main_slave_ruler target = this }
				}
			}
			else_if = {
				limit = { 
					any_held_title = {
						tier = tier_county
						development_level > 0
					}
				}
				add_to_global_variable_list = { name = tentacleswarm_target_ruler target = this }	
				if = {
					limit = {
						highest_held_title_tier >= tier_duchy 
						is_independent_ruler = yes
					}
					add_to_global_variable_list = { name = tentacleswarm_main_target_ruler target = this }
				}
			}
			else = {
				add_to_global_variable_list = { name = tentacleswarm_protected_ruler target = this }	
			}
		}
		#成就检测
		tentacleswarm_yearly_check = yes
		#每年刷一个爬杆男出来，防止找接盘侠不到人
		random_county = {
			save_scope_as = target
		}
		create_character = {
			age = 30
			name = "Cheri"
			gender = male
			random_traits = yes
			location = scope:target.title_province
			culture = scope:target.culture
			faith = faith:pagan 
			save_scope_as = lucky
		}
	}
}
#每个人年度触发
random_yearly_everyone_pulse = {
	on_actions = { 
		tentacleswarm_bliever_yearly
		tentacle_slave_yearly
		tentacle_encounter_yearly
	}
}
tentacleswarm_bliever_yearly = { #触手信徒年度行动触发
	trigger = {
		has_religion = religion:tentacleswarm_religion
		is_ai = yes
	}
	effect = {
		if = { #没有成为奴隶的成年女性成为奴隶
			limit = {
				is_female = yes
				is_adult = yes
				not = { has_trait = tentacle_slave }
			}
			trigger_event = {
				id = tentacleswarm_slave.0031 #虔诚赐福
			}
		}
	}
}
tentacle_encounter_yearly = {#遭遇年度触发
	trigger = {
	}
	effect = {
		#男性，可能因为瘴气患病
		if = {
			limit = {
				is_female = no
			}
			random_list = {
				0 = {
					modifier = {
						add = location.county.var:tentacleswarm_corruption
						exists = location
						exists = location.county
					}
					trigger_event = {
						on_action = disease_outbreak_pulse
						months = { 1 6 }
					}
				}
				30 = {
				}
			}
		}
		#适龄女性，可能受到袭击
		if = {
			limit = {
				is_female = yes
				fertility >= 0.1
				is_adult = yes
			}
			random_list = {
				0 = {
					modifier = {
						add = location.county.var:tentacleswarm_corruption
						exists = location
						exists = location.county
					}
					modifier = { #苗床
						factor = 10
						is_tentacle_womb_corrupted = yes
					}
					modifier = { #成瘾
						factor = 2
						is_tentacle_body_corrupted = yes
					}
					trigger_event = {
						id = tentacleswarm_slave.0021 #水井杀
						months = { 6 9 }
					}
				}
				300 = {
				}
			}
			#成瘾角色，还要触发成瘾遭遇
			if = {
				limit = { is_tentacle_body_corrupted = yes }
				trigger_event = {
					id = tentacleswarm_slave.3002 #成瘾事件
					months = { 1 5 }
				}
			}
		}
	}
}
tentacle_slave_yearly = {#触手奴隶年度触发
	trigger = {
		is_tentacle_slave = yes
	}
	effect = {
		if = {
			limit = {
				#如果上头有人，皈依正统信仰,揭露身份
				is_ai = yes
				NOT = { has_religion = religion:tentacleswarm_religion }
				any_liege_or_above = { has_religion = religion:tentacleswarm_religion }
			}
			convert_to_tentacleswarm_religion = yes
		}
		if = { #生育率太低的时候失去祝福，开始生病
			limit = { fertility <= 0.1 }
			if = {
				limit = { has_character_flag = immune_to_disease }
				remove_character_flag = immune_to_disease
			}
			if = { #AI直接自杀了（暂时取消）
				limit = { 
					always = no
					is_ai = yes 
				}
				if = {
					limit = { is_imprisoned = no }
					death = { death_reason = death_disappearance }
				}
				else = {
					death = { death_reason = death_suicide }
				}
			}
			else_if = { #体弱多病
				limit = { NOT = { has_trait = infirm } }
				trigger_event = {
					id = tentacleswarm_slave.1001
				}
			}
			else_if = { #抑郁
				limit = { NOT = { has_trait = depressed } }
				trigger_event = {
					id = health.7100
				}
			}
			else_if = { #癌症
				limit = { NOT = { has_trait = cancer } }
				trigger_event = {
					id = health.1007
				}
			}
			else_if = { #肺痨
				limit = { NOT = { has_trait = consumption } }
				trigger_event = {
					id = health.1006
				}
			}
			else_if	= { #痛风
				limit = { NOT = { has_trait = gout_ridden } }
				trigger_event = {
					id = health.1003
				}
			}
			else = {
				death = { death_reason = death_cancer }
			}
		}
	}
}
#每年触发
yearly_playable_pulse = {
	on_actions = {
		delay = { days = 10}
		tentacleswarm_yearly_modifier_check #检查灭杀令和播种令
		delay = { days = 10 }
		tentacleswarm_yearly_playable_pulse #领地腐化度结算
	}
}
tentacleswarm_yearly_playable_pulse = {
	effect = {
		#计算统治者的宫廷会带来多大的腐化度
		set_variable =  { name = tentacleswarm_corruption_add value = 0} 	#基础
		if = {
			limit = { is_tentacle_slave = yes } 
			change_variable =  { name = tentacleswarm_corruption_add add = 25 } #如果统治者是奴隶
		}	
		if = {
			limit = { has_religion = religion:tentacleswarm_religion } 
			change_variable =  { name = tentacleswarm_corruption_add add = 0 } #如果统治者信奉
		}
		if = {
			limit = { 
				has_character_modifier = tentacleswarm_spread
			}
			change_variable =  { name = tentacleswarm_corruption_add add = 10 }  #如果统治者执行播种令
		}
		every_spouse = {
			limit = { is_tentacle_slave = yes  }
			PREV = { change_variable =  { name = tentacleswarm_corruption_add add = 15 } }#如果配偶是奴隶，配偶一般也是宾客
		}
		every_spouse = {
			limit = { has_religion = religion:tentacleswarm_religion  }
			PREV = { change_variable =  { name = tentacleswarm_corruption_add add = 0 } }#如果配偶信奉
		}
		every_courtier_or_guest = {
			limit = { is_tentacle_slave = yes  }
			PREV = { change_variable =  { name = tentacleswarm_corruption_add add = 3 } }#如果宾客是奴隶
		}
		every_courtier_or_guest = {
			limit = { has_religion = religion:tentacleswarm_religion  }
			PREV = { change_variable =  { name = tentacleswarm_corruption_add add = 0  } }#如果宾客信奉
		}
		if = {
			limit = { #摧毁失去所有栖息地的触手领主的国家
				has_religion = religion:tentacleswarm_religion
				any_held_title = {
					tier = tier_county #持有伯爵领。像骑士团这样的领主，不持有伯爵领，不会被摧毁。
				}
				NOT = {
					any_held_title = { #所有伯爵领都已经被摧毁
						tier = tier_county
						NOT = { has_county_modifier = tentacleswarm_destroy }
					}
				}
			}
			trigger_event = {
				id = tentacleswarm_destroy.0011
			}
		}
		else_if = { #如果依然持有土地的话
			limit = { 
				is_alive = yes
				is_landed = yes 
			}
			set_variable =  { name = tentacleswarm_warbeast_gain value = 0}#用于后面计算能获得几队巨兽
		
			#为每个伯爵领结算腐化度
			every_held_title = {
				limit = { tier = tier_county }
				save_scope_as = county
				if = { #已经被废弃的土地，不结算滋生
					limit = { 
						has_county_modifier = tentacleswarm_destroy
					}
				}
				#否则，进行滋生
				else = {
					#发展度计算
					change_development_progress_with_overflow = {
						value = tentacleswarm_corruption_eaten
						multiply = 0.5
					}
						
					#计算衰减率
					#基础衰减，固定10%
					set_variable =  { name = tentacleswarm_corruption_decay value = 10 } 
					#饥饿衰减，取决于当地的食物供应于现有腐化度的比例
					set_variable =  { name = tentacleswarm_corruption_hunger_decay value = tentacleswarm_corruption_hunger_value } 	
					change_variable =  { name = tentacleswarm_corruption_decay add = var:tentacleswarm_corruption_hunger_decay } 	
					
					#计算衰减额度
					set_variable =  { name = tentacleswarm_corruption_decrease value = var:tentacleswarm_corruption }
					change_variable =  { name = tentacleswarm_corruption_decrease multiply = var:tentacleswarm_corruption_decay }
					change_variable =  { name = tentacleswarm_corruption_decrease multiply = 0.01 }
					if = { #如果衰减额度大于1，进行传播与衰减的结算，否则跳过。
						limit = { var:tentacleswarm_corruption_decrease = { compare_value > 1 } } 
						#50%传播给一个相邻伯爵领
						random_title_to_title_neighboring_and_across_water_county = {
							limit = {
								NOT = { has_county_modifier = tentacleswarm_destroy }
							}
							change_variable =  {
								name = tentacleswarm_corruption 
								add = {
									value = scope:county.var:tentacleswarm_corruption_decrease 
									multiply = 0.50
								}
							}
							tentacleswarm_corruption_county_check = yes
						}					
						#30%传播给另一个相邻伯爵领
						random_title_to_title_neighboring_and_across_water_county = {
							limit = {
								NOT = { has_county_modifier = tentacleswarm_destroy }
							}
							change_variable =  {
								name = tentacleswarm_corruption 
								add = {
									value = scope:county.var:tentacleswarm_corruption_decrease 
									multiply = 0.30
								}
							}
							tentacleswarm_corruption_county_check = yes
						}
						
						#计算腐化度衰退
						change_variable =  { name = tentacleswarm_corruption subtract = var:tentacleswarm_corruption_decrease }
					}
					
					#领主宫廷带来的增长
					change_variable =  { name = tentacleswarm_corruption add = holder.var:tentacleswarm_corruption_add }
				
					#计算地形带来的影响
					change_variable =  { name = tentacleswarm_corruption add = var:tentacleswarm_corruption_nature }
					

					#五档：10,20,35,60,100
					tentacleswarm_corruption_county_check = yes #根据腐化程度结算效果：改颜色，改buff,
					
					#巨兽生成 
					if = {
						limit = { #零档，无腐化
							var:tentacleswarm_corruption = { compare_value < 10 }
						}
						change_variable =  { name = tentacleswarm_corruption_destroy add = 0 }
					}
					else_if = { #一档
						limit = {
							var:tentacleswarm_corruption = { compare_value < 20 }
						}
						change_variable =  { name = tentacleswarm_corruption_destroy add = 1 }
					}
					else_if = { #二档
						limit = {
							var:tentacleswarm_corruption = { compare_value < 35 }
						}
						change_variable =  { name = tentacleswarm_corruption_destroy add = 4 }
					}
					else_if = { #三档
						limit = {
							var:tentacleswarm_corruption = { compare_value < 60 }
						}
						change_variable =  { name = tentacleswarm_corruption_destroy add = 12 }
					}
					else_if = { #四档
						limit = {
							var:tentacleswarm_corruption = { compare_value < 100 }
						}
						change_variable =  { name = tentacleswarm_corruption_destroy add = 36 }
					}
					else = { #五档
						change_variable =  { name = tentacleswarm_corruption_destroy add = 100 }
					}
					
					if = {
						limit = { #破坏点数满100时候，生一队巨兽
							var:tentacleswarm_corruption_destroy = { compare_value >= 100 }
						}
						change_variable =  { name = tentacleswarm_corruption_destroy add = -100 }
						holder = { 
							if = {
								limit = { 
									has_religion = religion:tentacleswarm_religion
								}
								change_variable = { name = tentacleswarm_warbeast_gain add = 1 }
							}
							else = {
								save_scope_as = holder
								send_interface_message = {
									type = event_steward_task_bad
									title = tentacleswarm_corruption_destroy.notification
									desc = tentacleswarm_corruption_destroy.desc
									
									left_icon = scope:county
									right_icon = scope:holder
									goto = scope:county
								}
								scope:county = {
									change_variable =  { name = tentacleswarm_corruption_warbeast add = 100 }
								}
							}
						}
					}
					if = {
						limit = { #本宗教领主可以唤醒沉睡的巨兽
							var:tentacleswarm_corruption_warbeast = { compare_value >= 100 }
							holder = { has_religion = religion:tentacleswarm_religion }
						}
						change_variable =  { name = tentacleswarm_corruption_warbeast add = -100 }
						holder = { #战争巨兽
							change_variable = { name = tentacleswarm_warbeast_gain add = 1 }
						}
					}
				}
			}
			if = { #按照上面统计的数量生成战争巨兽
				limit = { 
					#always = no
					var:tentacleswarm_warbeast_gain = { compare_value >= 1 } 
				}
				spawn_army = {
					levies = {
						value = var:tentacleswarm_warbeast_gain
						multiply = 100
					}
					men_at_arms = {
						type = tentacleswarm_warbeast
						stacks = var:tentacleswarm_warbeast_gain #1组，一组十只
					}
					location = root.capital_province
					name = tentacleswarm_warbeast_event_troops
					inheritable = no #不可继承
				}
			}
			#对于玩家来说，如果没有发展度大于3的省份，予以预警
			if = {
				limit = {
					is_ai = no
					has_religion = religion:tentacleswarm_religion
					NOT = { has_character_flag = tentacleswarm_destroy_alert }
					NOT = {
						any_held_title = {
							tier = tier_county
							development_level > 3
						}
					}
				}
				trigger_event = {
					id = tentacleswarm_destroy.0001
					days = 10
				}
			}
		}
		#成就相关
		tentacleswarm_check = yes
	}
}
#检查播种令和灭杀令
tentacleswarm_yearly_modifier_check = {
	effect = {
		if = {
			limit = { has_religion = religion:tentacleswarm_religion }
			if = { #信徒开启播种令
				limit = { 
					NOT = { has_character_modifier = tentacleswarm_spread }
					is_ai = yes #玩家自己点决议
					is_tentacle_slave = yes #非奴隶没有兴趣
					is_landed = yes
				}
				add_character_modifier = tentacleswarm_spread
			}
			if = { #信徒变政体
				limit = { 
					NOT = { has_government = tentacleswarm_government }
					is_ai = yes #玩家自己点决议
					is_tentacle_slave = yes #非奴隶没有兴趣
					is_landed = yes
				}
				change_government = tentacleswarm_government
			}
		}
		else = {
			if = { #非信徒播种令无效化
				limit = { has_character_modifier = tentacleswarm_spread}
				remove_character_modifier = tentacleswarm_spread
			}
			if = { #非信徒关闭政体
				limit = { 
					has_government = tentacleswarm_government
					is_landed = yes
				}
				change_government = feudal_government #暂且先变封建
			}
		}
		if = {
			limit = { 
				faith = {has_doctrine = doctrine_tentacle_slave_evil}
				is_tentacle_slave = no
			}
			#敌对者开启灭杀令
			#通过决议
			
			#退出触手征服进攻战争
			every_character_war = {
				limit = { 
					using_cb = tentacleswarm_conquest 
					is_attacker = prev
					NOT = { is_war_leader = prev }
				}
				remove_participant = prev
			}
			#退出触手剿灭防御战争
			every_character_war = {
				limit = { 
					using_cb = tentacleswarm_religious_war
					is_defender = prev
					NOT = { is_war_leader = prev }
				}
				remove_participant = prev
			}
		}
		else = {
			if = { #非敌对者灭杀令无效化
				limit = { has_character_modifier = tentacleswarm_anti}
				remove_character_modifier = tentacleswarm_anti
			}
			#退出触手征服防御战争
			every_character_war = {
				limit = { 
					using_cb = tentacleswarm_religious_war
					is_attacker = prev
					NOT = { is_war_leader = prev }
				}
				remove_participant = prev
			}
			#退出触手剿灭进攻战争
			every_character_war = {
				limit = { 
					using_cb = tentacleswarm_conquest
					is_defender = prev
					NOT = { is_war_leader = prev }
				}
				remove_participant = prev
			}
		}
	}
}
#每年随机触发
random_yearly_playable_pulse = {
	#自带的条件，诸如有地未被囚禁等等
	#trigger = { basic_is_valid_for_yearly_events_trigger = yes }
	on_actions = {
		tentacleswarm_random_yearly_playable_pulse	
		delay = { days = 10 }
		tentacleswarm_cancel_holy_order_lease_pulse #驱逐异教骑士团
	}
}
tentacleswarm_random_yearly_playable_pulse = {
	trigger = { 
		basic_is_valid_for_yearly_events_trigger = yes 
	}
	effect = {
		#远征。通常的触手征服只会打相邻的目标，我们现在让AI进行远征
		if = {
			limit = {
				has_religion = religion:tentacleswarm_religion
				is_at_war = no
				is_ai = yes
				is_independent_ruler = yes #独立
				max_military_strength > 4000 #有一定兵力积蓄
			}
			save_scope_as = actor
			#搜索最大发展度的土地
			scope:actor = {
				set_variable =  { name = max_held_development value = 1 }
				every_held_title = {
					limit = { 
						tier = tier_county
					}
					if = {
						limit = { 
							development_level > scope:actor.var:max_held_development
						}
						scope:actor = { set_variable =  { name = max_held_development value = prev.development_level }}
					}
				}
				change_variable = { name = max_held_development multiply = 2 } #目标地要是原来的两倍以上发展度
				
				if = {	
					limit = { is_independent_ruler = yes }
					set_variable =  { name = max_held_development value = 1 } #独立领主的话，就不在意那么多
				}
			}
			#确定战争对象
			random_in_global_list = {
				variable = tentacleswarm_main_target_ruler
				limit = {
					highest_held_title_tier >= tier_duchy #不啃独立小伯爵
					is_landed = yes #有地
					NOT = { has_religion = religion:tentacleswarm_religion } #异教
					capital_county = {  #首都有较高发展度
						development_level >= scope:actor.var:max_held_development
					}
					ROOT = { #需要符合宣战条件
						is_character_interaction_valid = {
						   recipient = PREV
						   interaction = declare_war_interaction
						}
					}
					is_at_war = yes #优先打处于战争中的目标
				}
				save_scope_as = target_character
				save_scope_as = recipient
			}
			if = {
				limit = { 
					NOT = { exists = scope:target_character }
				}
				random_in_global_list = { #否则的话，和平的目标的也打
					variable = tentacleswarm_main_target_ruler
					limit = {
						highest_held_title_tier >= tier_duchy #不啃独立小伯爵
						is_landed = yes #有地
						NOT = { has_religion = religion:tentacleswarm_religion } #异教
						capital_county = {  #首都有较高发展度
							development_level >= scope:actor.var:max_held_development
						}
						ROOT = { #需要符合宣战条件
							is_character_interaction_valid = {
							   recipient = PREV
							   interaction = declare_war_interaction
							}
						}
					}
					save_scope_as = target_character
					save_scope_as = recipient
				}
			}
			#确定目标，发动战争
			if = {
				limit = { 
					exists = scope:target_character
				}
				scope:target_character = {
					random_realm_county = {
						limit = { 
							development_level >= scope:actor.var:max_held_development
							building_max_garrison <= scope:actor.max_military_strength #能围下来
						}
						save_scope_as = target
					}
					if = {
						limit = {
							war_declarer_needs_hook_on_liege = no #不需要领主同意就能发动战争
							exists = scope:target
						}
						scope:actor = {
							start_war = { 
								casus_belli = tentacleswarm_conquest 
								target = scope:target_character
								target_title = scope:target.kingdom
							}
						}
					}
				}
			}
		}
	}
}
tentacleswarm_cancel_holy_order_lease_pulse = { #驱逐敌对骑士团
	trigger = {
		is_landed = yes
	}
	effect = {
		every_held_title = {
			limit = { 
				tier = tier_county
			}
			every_county_province = {
				limit = {
					exists = barony
				}
				barony = { #搜查每个直辖地内男爵领
					if = {
						limit = { #被租赁
							is_leased_out = yes
							has_revokable_lease = yes
						}
						lessee_title = { save_scope_as = lessee_title }
						if = {
							limit = { #敌对信仰租赁
								root.faith ={
									faith_hostility_level = { target = scope:lessee_title.holder.faith value > 1 }
								}
							}
							revoke_lease = yes #撤销租赁
						}
					}
				}
			}
		}
	}
}